
servotest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000112  00800100  00001576  0000160a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001576  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000008  00800212  00800212  0000171c  2**0
                  ALLOC
  3 .debug_aranges 000001a0  00000000  00000000  0000171c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000003a1  00000000  00000000  000018bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000029c9  00000000  00000000  00001c5d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001364  00000000  00000000  00004626  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000019f9  00000000  00000000  0000598a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000340  00000000  00000000  00007384  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000494  00000000  00000000  000076c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000f06  00000000  00000000  00007b58  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000218  00000000  00000000  00008a5e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
       4:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
       8:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
       c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      10:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      14:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      18:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      1c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      20:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      24:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      28:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      2c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      30:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      34:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      38:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      3c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      40:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      44:	0c 94 1f 03 	jmp	0x63e	; 0x63e <__vector_17>
      48:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      4c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      50:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      54:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      58:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      5c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      60:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      64:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      68:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      6c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>

00000070 <__ctors_end>:
      70:	11 24       	eor	r1, r1
      72:	1f be       	out	0x3f, r1	; 63
      74:	cf ef       	ldi	r28, 0xFF	; 255
      76:	d0 e1       	ldi	r29, 0x10	; 16
      78:	de bf       	out	0x3e, r29	; 62
      7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
      7c:	12 e0       	ldi	r17, 0x02	; 2
      7e:	a0 e0       	ldi	r26, 0x00	; 0
      80:	b1 e0       	ldi	r27, 0x01	; 1
      82:	e6 e7       	ldi	r30, 0x76	; 118
      84:	f5 e1       	ldi	r31, 0x15	; 21
      86:	02 c0       	rjmp	.+4      	; 0x8c <.do_copy_data_start>

00000088 <.do_copy_data_loop>:
      88:	05 90       	lpm	r0, Z+
      8a:	0d 92       	st	X+, r0

0000008c <.do_copy_data_start>:
      8c:	a2 31       	cpi	r26, 0x12	; 18
      8e:	b1 07       	cpc	r27, r17
      90:	d9 f7       	brne	.-10     	; 0x88 <.do_copy_data_loop>

00000092 <__do_clear_bss>:
      92:	12 e0       	ldi	r17, 0x02	; 2
      94:	a2 e1       	ldi	r26, 0x12	; 18
      96:	b2 e0       	ldi	r27, 0x02	; 2
      98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
      9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
      9c:	aa 31       	cpi	r26, 0x1A	; 26
      9e:	b1 07       	cpc	r27, r17
      a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
      a2:	0e 94 47 02 	call	0x48e	; 0x48e <main>
      a6:	0c 94 b9 0a 	jmp	0x1572	; 0x1572 <_exit>

000000aa <__bad_interrupt>:
      aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ae <setPWM1>:
//	Take a look one day:
//	http://www.avrfreaks.net/index.php?name=PNphpBB2&file=printview&t=52601&start=0

void setPWM1()
{
	DDRD |= (1<<PD4) | (1<<PD5);    
      ae:	8a b1       	in	r24, 0x0a	; 10
      b0:	80 63       	ori	r24, 0x30	; 48
      b2:	8a b9       	out	0x0a, r24	; 10
	
	TCCR1B |= (0<<WGM13) | (0<<WGM12); 
      b4:	e1 e8       	ldi	r30, 0x81	; 129
      b6:	f0 e0       	ldi	r31, 0x00	; 0
      b8:	80 81       	ld	r24, Z
      ba:	80 83       	st	Z, r24
	TCCR1A |= (1<<WGM11) | (1<<WGM10) | (1<<COM1A1) | (1<<COM1A0) | (1<<COM1B1) | (1<<COM1B0); 
      bc:	a0 e8       	ldi	r26, 0x80	; 128
      be:	b0 e0       	ldi	r27, 0x00	; 0
      c0:	8c 91       	ld	r24, X
      c2:	83 6f       	ori	r24, 0xF3	; 243
      c4:	8c 93       	st	X, r24
	TCCR1B |= (1<<CS11) | (1<<CS10); 
      c6:	80 81       	ld	r24, Z
      c8:	83 60       	ori	r24, 0x03	; 3
      ca:	80 83       	st	Z, r24

	TCNT1 = 1; 
      cc:	81 e0       	ldi	r24, 0x01	; 1
      ce:	90 e0       	ldi	r25, 0x00	; 0
      d0:	90 93 85 00 	sts	0x0085, r25
      d4:	80 93 84 00 	sts	0x0084, r24
	ICR1 = SERVO_ICR;
      d8:	80 e1       	ldi	r24, 0x10	; 16
      da:	97 e2       	ldi	r25, 0x27	; 39
      dc:	90 93 87 00 	sts	0x0087, r25
      e0:	80 93 86 00 	sts	0x0086, r24
	OCR1A = SERVO_1A_MID;
      e4:	82 ea       	ldi	r24, 0xA2	; 162
      e6:	93 e0       	ldi	r25, 0x03	; 3
      e8:	90 93 89 00 	sts	0x0089, r25
      ec:	80 93 88 00 	sts	0x0088, r24
	OCR1B = SERVO_1B_MID;
      f0:	90 93 8b 00 	sts	0x008B, r25
      f4:	80 93 8a 00 	sts	0x008A, r24
}
      f8:	08 95       	ret

000000fa <setPWM2>:

void setPWM2()
{
	DDRD |= (1<<PD7);    
      fa:	57 9a       	sbi	0x0a, 7	; 10

	TCCR2B |= (0<<WGM22); 
      fc:	e1 eb       	ldi	r30, 0xB1	; 177
      fe:	f0 e0       	ldi	r31, 0x00	; 0
     100:	80 81       	ld	r24, Z
     102:	80 83       	st	Z, r24
	TCCR2A |= (1<<WGM21) | (1<<WGM20) | (1<<COM2A1) | (0<<COM2A0) | (1<<COM2B1) | (0<<COM2B0);
     104:	a0 eb       	ldi	r26, 0xB0	; 176
     106:	b0 e0       	ldi	r27, 0x00	; 0
     108:	8c 91       	ld	r24, X
     10a:	83 6a       	ori	r24, 0xA3	; 163
     10c:	8c 93       	st	X, r24
	TCCR2B |= (1<<CS21) | (1<<CS20); 
     10e:	80 81       	ld	r24, Z
     110:	83 60       	ori	r24, 0x03	; 3
     112:	80 83       	st	Z, r24

	//ICR2 = icr;
	TCNT2 = 1;
     114:	81 e0       	ldi	r24, 0x01	; 1
     116:	80 93 b2 00 	sts	0x00B2, r24
	OCR2A = motorPWM
     11a:	80 e5       	ldi	r24, 0x50	; 80
     11c:	80 93 b3 00 	sts	0x00B3, r24
	OCR2B = motorPWM;
     120:	80 93 b4 00 	sts	0x00B4, r24
}
     124:	08 95       	ret

00000126 <checkOCRa>:

void checkOCRa(int min, int max)
{
     126:	9c 01       	movw	r18, r24
	if(OCR1A>max)
     128:	80 91 88 00 	lds	r24, 0x0088
     12c:	90 91 89 00 	lds	r25, 0x0089
     130:	68 17       	cp	r22, r24
     132:	79 07       	cpc	r23, r25
     134:	18 f4       	brcc	.+6      	; 0x13c <checkOCRa+0x16>
		OCR2A=max;
     136:	60 93 b3 00 	sts	0x00B3, r22
     13a:	08 95       	ret
	else if(OCR1A<min)
     13c:	80 91 88 00 	lds	r24, 0x0088
     140:	90 91 89 00 	lds	r25, 0x0089
     144:	82 17       	cp	r24, r18
     146:	93 07       	cpc	r25, r19
     148:	10 f4       	brcc	.+4      	; 0x14e <checkOCRa+0x28>
		OCR2A=min;
     14a:	20 93 b3 00 	sts	0x00B3, r18
     14e:	08 95       	ret

00000150 <checkOCRb>:
}

void checkOCRb(int min, int max)
{
     150:	9c 01       	movw	r18, r24
	if(OCR1A>max)
     152:	80 91 88 00 	lds	r24, 0x0088
     156:	90 91 89 00 	lds	r25, 0x0089
     15a:	68 17       	cp	r22, r24
     15c:	79 07       	cpc	r23, r25
     15e:	18 f4       	brcc	.+6      	; 0x166 <checkOCRb+0x16>
		OCR2B=max;
     160:	60 93 b4 00 	sts	0x00B4, r22
     164:	08 95       	ret
	else if(OCR1A<min)
     166:	80 91 88 00 	lds	r24, 0x0088
     16a:	90 91 89 00 	lds	r25, 0x0089
     16e:	82 17       	cp	r24, r18
     170:	93 07       	cpc	r25, r19
     172:	10 f4       	brcc	.+4      	; 0x178 <checkOCRb+0x28>
		OCR2B=min;
     174:	20 93 b4 00 	sts	0x00B4, r18
     178:	08 95       	ret

0000017a <forward>:
	PORTB = motorState;
}

void forward()
{
	PORTC &= ~(1<<PC0);
     17a:	40 98       	cbi	0x08, 0	; 8
	PORTC |= (1<<PC1);
     17c:	41 9a       	sbi	0x08, 1	; 8

	PORTC &= ~(1<<PC6);
     17e:	46 98       	cbi	0x08, 6	; 8
	PORTC |= (1<<PC7);
     180:	47 9a       	sbi	0x08, 7	; 8
}
     182:	08 95       	ret

00000184 <reverse>:

void reverse()
{
	PORTC |= (1<<PC0);
     184:	40 9a       	sbi	0x08, 0	; 8
	PORTC &= ~(1<<PC1);
     186:	41 98       	cbi	0x08, 1	; 8

	PORTC |= (1<<PC6);
     188:	46 9a       	sbi	0x08, 6	; 8
	PORTC &= ~(1<<PC7);
     18a:	47 98       	cbi	0x08, 7	; 8
}
     18c:	08 95       	ret

0000018e <right>:

void right()
{
	PORTC &= ~(1<<PC0);
     18e:	40 98       	cbi	0x08, 0	; 8
	PORTC |= (1<<PC1);
     190:	41 9a       	sbi	0x08, 1	; 8

	PORTC &= ~(1<<PC6);
     192:	46 98       	cbi	0x08, 6	; 8
	PORTC &= ~(1<<PC7);
     194:	47 98       	cbi	0x08, 7	; 8
}
     196:	08 95       	ret

00000198 <left>:


void left()
{
	PORTC &= ~(1<<PC0);
     198:	40 98       	cbi	0x08, 0	; 8
	PORTC &= ~(1<<PC1);
     19a:	41 98       	cbi	0x08, 1	; 8

	PORTC &= ~(1<<PC6);
     19c:	46 98       	cbi	0x08, 6	; 8
	PORTC |= (1<<PC7);
     19e:	47 9a       	sbi	0x08, 7	; 8
}
     1a0:	08 95       	ret

000001a2 <spinCW>:

void spinCW()
{
	PORTC |= (1<<PC0);
     1a2:	40 9a       	sbi	0x08, 0	; 8
	PORTC &= ~(1<<PC1);
     1a4:	41 98       	cbi	0x08, 1	; 8

	PORTC &= ~(1<<PC6);
     1a6:	46 98       	cbi	0x08, 6	; 8
	PORTC |= (1<<PC7);
     1a8:	47 9a       	sbi	0x08, 7	; 8
}
     1aa:	08 95       	ret

000001ac <spinCCW>:

void spinCCW()
{
	PORTC &= ~(1<<PC0);
     1ac:	40 98       	cbi	0x08, 0	; 8
	PORTC |= (1<<PC1);
     1ae:	41 9a       	sbi	0x08, 1	; 8

	PORTC |= (1<<PC6);
     1b0:	46 9a       	sbi	0x08, 6	; 8
	PORTC &= ~(1<<PC7);
     1b2:	47 98       	cbi	0x08, 7	; 8
}
     1b4:	08 95       	ret

000001b6 <stop>:

void stop()
{
	PORTC &= ~(1<<PC0);
     1b6:	40 98       	cbi	0x08, 0	; 8
	PORTC &= ~(1<<PC1);
     1b8:	41 98       	cbi	0x08, 1	; 8

	PORTC &= ~(1<<PC6);
     1ba:	46 98       	cbi	0x08, 6	; 8
	PORTC &= ~(1<<PC7);
     1bc:	47 98       	cbi	0x08, 7	; 8
}
     1be:	08 95       	ret

000001c0 <setMotorState>:


void setMotorState(int state)
{
	switch (state)
     1c0:	83 30       	cpi	r24, 0x03	; 3
     1c2:	91 05       	cpc	r25, r1
     1c4:	91 f0       	breq	.+36     	; 0x1ea <setMotorState+0x2a>
     1c6:	84 30       	cpi	r24, 0x04	; 4
     1c8:	91 05       	cpc	r25, r1
     1ca:	1c f4       	brge	.+6      	; 0x1d2 <setMotorState+0x12>
     1cc:	01 97       	sbiw	r24, 0x01	; 1
     1ce:	c9 f4       	brne	.+50     	; 0x202 <setMotorState+0x42>
     1d0:	09 c0       	rjmp	.+18     	; 0x1e4 <setMotorState+0x24>
     1d2:	85 30       	cpi	r24, 0x05	; 5
     1d4:	91 05       	cpc	r25, r1
     1d6:	79 f0       	breq	.+30     	; 0x1f6 <setMotorState+0x36>
     1d8:	85 30       	cpi	r24, 0x05	; 5
     1da:	91 05       	cpc	r25, r1
     1dc:	4c f0       	brlt	.+18     	; 0x1f0 <setMotorState+0x30>
     1de:	06 97       	sbiw	r24, 0x06	; 6
     1e0:	81 f4       	brne	.+32     	; 0x202 <setMotorState+0x42>
     1e2:	0c c0       	rjmp	.+24     	; 0x1fc <setMotorState+0x3c>
	{
		case 1:
			forward();
     1e4:	0e 94 bd 00 	call	0x17a	; 0x17a <forward>
     1e8:	08 95       	ret
			break;
		case 2:
			reverse();
			break;
		case 3:
			right();
     1ea:	0e 94 c7 00 	call	0x18e	; 0x18e <right>
     1ee:	08 95       	ret
			break;
		case 4:
			left();
     1f0:	0e 94 cc 00 	call	0x198	; 0x198 <left>
     1f4:	08 95       	ret
			break;
		case 5:
			spinCW();
     1f6:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <spinCW>
     1fa:	08 95       	ret
			break;
		case 6:
			spinCCW();
     1fc:	0e 94 d6 00 	call	0x1ac	; 0x1ac <spinCCW>
     200:	08 95       	ret
			break;
		default:
			reverse();
     202:	0e 94 c2 00 	call	0x184	; 0x184 <reverse>
     206:	08 95       	ret

00000208 <boottest>:
volatile int romAdr = 0x00;

void boottest()
{
	PORTB = 0x00;
     208:	15 b8       	out	0x05, r1	; 5
     20a:	88 e8       	ldi	r24, 0x88	; 136
     20c:	93 e1       	ldi	r25, 0x13	; 19
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     20e:	28 ec       	ldi	r18, 0xC8	; 200
     210:	30 e0       	ldi	r19, 0x00	; 0
     212:	f9 01       	movw	r30, r18
     214:	31 97       	sbiw	r30, 0x01	; 1
     216:	f1 f7       	brne	.-4      	; 0x214 <boottest+0xc>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     218:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     21a:	d9 f7       	brne	.-10     	; 0x212 <boottest+0xa>
     21c:	41 e0       	ldi	r20, 0x01	; 1
     21e:	50 e0       	ldi	r21, 0x00	; 0
     220:	20 e0       	ldi	r18, 0x00	; 0
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	68 ec       	ldi	r22, 0xC8	; 200
     226:	70 e0       	ldi	r23, 0x00	; 0
	_delay_ms(500);
	for(int i=1; i<255; i=i*2)
	{
		PORTB = i;
     228:	45 b9       	out	0x05, r20	; 5
     22a:	84 ef       	ldi	r24, 0xF4	; 244
     22c:	91 e0       	ldi	r25, 0x01	; 1
     22e:	fb 01       	movw	r30, r22
     230:	31 97       	sbiw	r30, 0x01	; 1
     232:	f1 f7       	brne	.-4      	; 0x230 <boottest+0x28>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     234:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     236:	d9 f7       	brne	.-10     	; 0x22e <boottest+0x26>

void boottest()
{
	PORTB = 0x00;
	_delay_ms(500);
	for(int i=1; i<255; i=i*2)
     238:	44 0f       	add	r20, r20
     23a:	55 1f       	adc	r21, r21
     23c:	2f 5f       	subi	r18, 0xFF	; 255
     23e:	3f 4f       	sbci	r19, 0xFF	; 255
     240:	28 30       	cpi	r18, 0x08	; 8
     242:	31 05       	cpc	r19, r1
     244:	89 f7       	brne	.-30     	; 0x228 <boottest+0x20>
	{
		PORTB = i;
		_delay_ms(50);
	}

}
     246:	08 95       	ret

00000248 <LEDB>:

void LEDB(int position)
{
	PORTB = (0x01<<position);
     248:	21 e0       	ldi	r18, 0x01	; 1
     24a:	30 e0       	ldi	r19, 0x00	; 0
     24c:	02 c0       	rjmp	.+4      	; 0x252 <LEDB+0xa>
     24e:	22 0f       	add	r18, r18
     250:	33 1f       	adc	r19, r19
     252:	8a 95       	dec	r24
     254:	e2 f7       	brpl	.-8      	; 0x24e <LEDB+0x6>
     256:	25 b9       	out	0x05, r18	; 5
}
     258:	08 95       	ret

0000025a <pwmInputTest>:

void pwmInputTest()
{
	OCR1A = SERVO_1A_MID;
     25a:	82 ea       	ldi	r24, 0xA2	; 162
     25c:	93 e0       	ldi	r25, 0x03	; 3
     25e:	90 93 89 00 	sts	0x0089, r25
     262:	80 93 88 00 	sts	0x0088, r24
	OCR1B = SERVO_1B_MID;	
     266:	90 93 8b 00 	sts	0x008B, r25
     26a:	80 93 8a 00 	sts	0x008A, r24

}

void LEDB(int position)
{
	PORTB = (0x01<<position);
     26e:	72 e0       	ldi	r23, 0x02	; 2
     270:	28 ec       	ldi	r18, 0xC8	; 200
     272:	30 e0       	ldi	r19, 0x00	; 0
     274:	64 e0       	ldi	r22, 0x04	; 4

	while(1)
	{
		while(!(PINA & (1<<PA1)))
		{
			OCR1A+=10;
     276:	58 e0       	ldi	r21, 0x08	; 8
     278:	41 e0       	ldi	r20, 0x01	; 1
     27a:	11 c0       	rjmp	.+34     	; 0x29e <pwmInputTest+0x44>
     27c:	80 91 88 00 	lds	r24, 0x0088
     280:	90 91 89 00 	lds	r25, 0x0089
     284:	0a 96       	adiw	r24, 0x0a	; 10
     286:	90 93 89 00 	sts	0x0089, r25
     28a:	80 93 88 00 	sts	0x0088, r24

}

void LEDB(int position)
{
	PORTB = (0x01<<position);
     28e:	45 b9       	out	0x05, r20	; 5
     290:	80 e1       	ldi	r24, 0x10	; 16
     292:	97 e2       	ldi	r25, 0x27	; 39
     294:	f9 01       	movw	r30, r18
     296:	31 97       	sbiw	r30, 0x01	; 1
     298:	f1 f7       	brne	.-4      	; 0x296 <pwmInputTest+0x3c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     29a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     29c:	d9 f7       	brne	.-10     	; 0x294 <pwmInputTest+0x3a>
	OCR1A = SERVO_1A_MID;
	OCR1B = SERVO_1B_MID;	

	while(1)
	{
		while(!(PINA & (1<<PA1)))
     29e:	01 9b       	sbis	0x00, 1	; 0
     2a0:	ed cf       	rjmp	.-38     	; 0x27c <pwmInputTest+0x22>
     2a2:	11 c0       	rjmp	.+34     	; 0x2c6 <pwmInputTest+0x6c>
			LEDB(0);
			_delay_ms(1000);
		}
		while(!(PINA & (1<<PA2)))
		{
			OCR1A-=10;
     2a4:	80 91 88 00 	lds	r24, 0x0088
     2a8:	90 91 89 00 	lds	r25, 0x0089
     2ac:	0a 97       	sbiw	r24, 0x0a	; 10
     2ae:	90 93 89 00 	sts	0x0089, r25
     2b2:	80 93 88 00 	sts	0x0088, r24

}

void LEDB(int position)
{
	PORTB = (0x01<<position);
     2b6:	75 b9       	out	0x05, r23	; 5
     2b8:	80 e1       	ldi	r24, 0x10	; 16
     2ba:	97 e2       	ldi	r25, 0x27	; 39
     2bc:	f9 01       	movw	r30, r18
     2be:	31 97       	sbiw	r30, 0x01	; 1
     2c0:	f1 f7       	brne	.-4      	; 0x2be <pwmInputTest+0x64>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     2c2:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     2c4:	d9 f7       	brne	.-10     	; 0x2bc <pwmInputTest+0x62>
		{
			OCR1A+=10;
			LEDB(0);
			_delay_ms(1000);
		}
		while(!(PINA & (1<<PA2)))
     2c6:	02 9b       	sbis	0x00, 2	; 0
     2c8:	ed cf       	rjmp	.-38     	; 0x2a4 <pwmInputTest+0x4a>
     2ca:	11 c0       	rjmp	.+34     	; 0x2ee <pwmInputTest+0x94>
			LEDB(1);
			_delay_ms(1000);
		}
		while(!(PINA & (1<<PA3)))
		{
			OCR1B+=10;
     2cc:	80 91 8a 00 	lds	r24, 0x008A
     2d0:	90 91 8b 00 	lds	r25, 0x008B
     2d4:	0a 96       	adiw	r24, 0x0a	; 10
     2d6:	90 93 8b 00 	sts	0x008B, r25
     2da:	80 93 8a 00 	sts	0x008A, r24

}

void LEDB(int position)
{
	PORTB = (0x01<<position);
     2de:	65 b9       	out	0x05, r22	; 5
     2e0:	80 e1       	ldi	r24, 0x10	; 16
     2e2:	97 e2       	ldi	r25, 0x27	; 39
     2e4:	f9 01       	movw	r30, r18
     2e6:	31 97       	sbiw	r30, 0x01	; 1
     2e8:	f1 f7       	brne	.-4      	; 0x2e6 <pwmInputTest+0x8c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     2ea:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     2ec:	d9 f7       	brne	.-10     	; 0x2e4 <pwmInputTest+0x8a>
		{
			OCR1A-=10;
			LEDB(1);
			_delay_ms(1000);
		}
		while(!(PINA & (1<<PA3)))
     2ee:	03 9b       	sbis	0x00, 3	; 0
     2f0:	ed cf       	rjmp	.-38     	; 0x2cc <pwmInputTest+0x72>
     2f2:	11 c0       	rjmp	.+34     	; 0x316 <pwmInputTest+0xbc>
			LEDB(2);
			_delay_ms(1000);
		}
		while(!(PINA & (1<<PA4)))
		{
			OCR1B-=10;
     2f4:	80 91 8a 00 	lds	r24, 0x008A
     2f8:	90 91 8b 00 	lds	r25, 0x008B
     2fc:	0a 97       	sbiw	r24, 0x0a	; 10
     2fe:	90 93 8b 00 	sts	0x008B, r25
     302:	80 93 8a 00 	sts	0x008A, r24

}

void LEDB(int position)
{
	PORTB = (0x01<<position);
     306:	55 b9       	out	0x05, r21	; 5
     308:	80 e1       	ldi	r24, 0x10	; 16
     30a:	97 e2       	ldi	r25, 0x27	; 39
     30c:	f9 01       	movw	r30, r18
     30e:	31 97       	sbiw	r30, 0x01	; 1
     310:	f1 f7       	brne	.-4      	; 0x30e <pwmInputTest+0xb4>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     312:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     314:	d9 f7       	brne	.-10     	; 0x30c <pwmInputTest+0xb2>
		{
			OCR1B+=10;
			LEDB(2);
			_delay_ms(1000);
		}
		while(!(PINA & (1<<PA4)))
     316:	04 9b       	sbis	0x00, 4	; 0
     318:	ed cf       	rjmp	.-38     	; 0x2f4 <pwmInputTest+0x9a>
		{
			OCR1B-=10;
			LEDB(3);
			_delay_ms(1000);
		}
		PORTB = 0x00;
     31a:	15 b8       	out	0x05, r1	; 5
     31c:	88 ee       	ldi	r24, 0xE8	; 232
     31e:	93 e0       	ldi	r25, 0x03	; 3
     320:	f9 01       	movw	r30, r18
     322:	31 97       	sbiw	r30, 0x01	; 1
     324:	f1 f7       	brne	.-4      	; 0x322 <pwmInputTest+0xc8>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     326:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     328:	d9 f7       	brne	.-10     	; 0x320 <pwmInputTest+0xc6>
     32a:	b9 cf       	rjmp	.-142    	; 0x29e <pwmInputTest+0x44>

0000032c <infinitePwmTest>:
		_delay_ms(100);
	}
}

void infinitePwmTest()
{
     32c:	8a e7       	ldi	r24, 0x7A	; 122
     32e:	93 e0       	ldi	r25, 0x03	; 3
     330:	20 e2       	ldi	r18, 0x20	; 32
     332:	3e e4       	ldi	r19, 0x4E	; 78
	for(int i=SERVO_1A_MIN; i<SERVO_1A_MAX; i++)
	{
		OCR1A = i;
     334:	90 93 89 00 	sts	0x0089, r25
     338:	80 93 88 00 	sts	0x0088, r24
		OCR1B = i;
     33c:	90 93 8b 00 	sts	0x008B, r25
     340:	80 93 8a 00 	sts	0x008A, r24
     344:	f9 01       	movw	r30, r18
     346:	31 97       	sbiw	r30, 0x01	; 1
     348:	f1 f7       	brne	.-4      	; 0x346 <infinitePwmTest+0x1a>
	}
}

void infinitePwmTest()
{
	for(int i=SERVO_1A_MIN; i<SERVO_1A_MAX; i++)
     34a:	01 96       	adiw	r24, 0x01	; 1
     34c:	43 e0       	ldi	r20, 0x03	; 3
     34e:	8a 3c       	cpi	r24, 0xCA	; 202
     350:	94 07       	cpc	r25, r20
     352:	81 f7       	brne	.-32     	; 0x334 <infinitePwmTest+0x8>
     354:	ff cf       	rjmp	.-2      	; 0x354 <infinitePwmTest+0x28>

00000356 <infiniteMotorTest>:
		*/
	}
}

void infiniteMotorTest()
{
     356:	cf 93       	push	r28
     358:	df 93       	push	r29
     35a:	c8 ec       	ldi	r28, 0xC8	; 200
     35c:	d0 e0       	ldi	r29, 0x00	; 0
	while(1)
	{
		forward();
     35e:	0e 94 bd 00 	call	0x17a	; 0x17a <forward>
     362:	80 e1       	ldi	r24, 0x10	; 16
     364:	97 e2       	ldi	r25, 0x27	; 39
     366:	fe 01       	movw	r30, r28
     368:	31 97       	sbiw	r30, 0x01	; 1
     36a:	f1 f7       	brne	.-4      	; 0x368 <infiniteMotorTest+0x12>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     36c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     36e:	d9 f7       	brne	.-10     	; 0x366 <infiniteMotorTest+0x10>
		_delay_ms(1000);
		reverse();
     370:	0e 94 c2 00 	call	0x184	; 0x184 <reverse>
     374:	80 e1       	ldi	r24, 0x10	; 16
     376:	97 e2       	ldi	r25, 0x27	; 39
     378:	fe 01       	movw	r30, r28
     37a:	31 97       	sbiw	r30, 0x01	; 1
     37c:	f1 f7       	brne	.-4      	; 0x37a <infiniteMotorTest+0x24>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     37e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     380:	d9 f7       	brne	.-10     	; 0x378 <infiniteMotorTest+0x22>
		_delay_ms(1000);
		right();
     382:	0e 94 c7 00 	call	0x18e	; 0x18e <right>
     386:	80 e1       	ldi	r24, 0x10	; 16
     388:	97 e2       	ldi	r25, 0x27	; 39
     38a:	fe 01       	movw	r30, r28
     38c:	31 97       	sbiw	r30, 0x01	; 1
     38e:	f1 f7       	brne	.-4      	; 0x38c <infiniteMotorTest+0x36>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     390:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     392:	d9 f7       	brne	.-10     	; 0x38a <infiniteMotorTest+0x34>
		_delay_ms(1000);
		left();
     394:	0e 94 cc 00 	call	0x198	; 0x198 <left>
     398:	80 e1       	ldi	r24, 0x10	; 16
     39a:	97 e2       	ldi	r25, 0x27	; 39
     39c:	fe 01       	movw	r30, r28
     39e:	31 97       	sbiw	r30, 0x01	; 1
     3a0:	f1 f7       	brne	.-4      	; 0x39e <infiniteMotorTest+0x48>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     3a2:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     3a4:	d9 f7       	brne	.-10     	; 0x39c <infiniteMotorTest+0x46>
		_delay_ms(1000);
		spinCW();
     3a6:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <spinCW>
     3aa:	80 e1       	ldi	r24, 0x10	; 16
     3ac:	97 e2       	ldi	r25, 0x27	; 39
     3ae:	fe 01       	movw	r30, r28
     3b0:	31 97       	sbiw	r30, 0x01	; 1
     3b2:	f1 f7       	brne	.-4      	; 0x3b0 <infiniteMotorTest+0x5a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     3b4:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     3b6:	d9 f7       	brne	.-10     	; 0x3ae <infiniteMotorTest+0x58>
		_delay_ms(1000);
		spinCCW();
     3b8:	0e 94 d6 00 	call	0x1ac	; 0x1ac <spinCCW>
     3bc:	80 e1       	ldi	r24, 0x10	; 16
     3be:	97 e2       	ldi	r25, 0x27	; 39
     3c0:	fe 01       	movw	r30, r28
     3c2:	31 97       	sbiw	r30, 0x01	; 1
     3c4:	f1 f7       	brne	.-4      	; 0x3c2 <infiniteMotorTest+0x6c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     3c6:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     3c8:	d9 f7       	brne	.-10     	; 0x3c0 <infiniteMotorTest+0x6a>
		_delay_ms(1000);
		stop();
     3ca:	0e 94 db 00 	call	0x1b6	; 0x1b6 <stop>
     3ce:	80 e1       	ldi	r24, 0x10	; 16
     3d0:	97 e2       	ldi	r25, 0x27	; 39
     3d2:	fe 01       	movw	r30, r28
     3d4:	31 97       	sbiw	r30, 0x01	; 1
     3d6:	f1 f7       	brne	.-4      	; 0x3d4 <infiniteMotorTest+0x7e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     3d8:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     3da:	d9 f7       	brne	.-10     	; 0x3d2 <infiniteMotorTest+0x7c>
     3dc:	c0 cf       	rjmp	.-128    	; 0x35e <infiniteMotorTest+0x8>

000003de <debug>:
	}
}	

void debug()
{
	PORTB = 0x00;
     3de:	15 b8       	out	0x05, r1	; 5
     3e0:	88 ee       	ldi	r24, 0xE8	; 232
     3e2:	93 e0       	ldi	r25, 0x03	; 3
     3e4:	28 ec       	ldi	r18, 0xC8	; 200
     3e6:	30 e0       	ldi	r19, 0x00	; 0
     3e8:	f9 01       	movw	r30, r18
     3ea:	31 97       	sbiw	r30, 0x01	; 1
     3ec:	f1 f7       	brne	.-4      	; 0x3ea <debug+0xc>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     3ee:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     3f0:	d9 f7       	brne	.-10     	; 0x3e8 <debug+0xa>
	_delay_ms(100);
	PORTB = 0xFF;
     3f2:	8f ef       	ldi	r24, 0xFF	; 255
     3f4:	85 b9       	out	0x05, r24	; 5
     3f6:	88 ee       	ldi	r24, 0xE8	; 232
     3f8:	93 e0       	ldi	r25, 0x03	; 3
     3fa:	28 ec       	ldi	r18, 0xC8	; 200
     3fc:	30 e0       	ldi	r19, 0x00	; 0
     3fe:	f9 01       	movw	r30, r18
     400:	31 97       	sbiw	r30, 0x01	; 1
     402:	f1 f7       	brne	.-4      	; 0x400 <debug+0x22>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     404:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     406:	d9 f7       	brne	.-10     	; 0x3fe <debug+0x20>
	_delay_ms(100);
		PORTB = 0x00;
     408:	15 b8       	out	0x05, r1	; 5
     40a:	88 ee       	ldi	r24, 0xE8	; 232
     40c:	93 e0       	ldi	r25, 0x03	; 3
     40e:	28 ec       	ldi	r18, 0xC8	; 200
     410:	30 e0       	ldi	r19, 0x00	; 0
     412:	f9 01       	movw	r30, r18
     414:	31 97       	sbiw	r30, 0x01	; 1
     416:	f1 f7       	brne	.-4      	; 0x414 <debug+0x36>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     418:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     41a:	d9 f7       	brne	.-10     	; 0x412 <debug+0x34>
	_delay_ms(100);
}
     41c:	08 95       	ret

0000041e <setInterrupt>:

}

void setInterrupt()
{	
	cli();
     41e:	f8 94       	cli
	OCR0B = 255;
     420:	8f ef       	ldi	r24, 0xFF	; 255
     422:	88 bd       	out	0x28, r24	; 40
	TCCR0A = 0x40;
     424:	80 e4       	ldi	r24, 0x40	; 64
     426:	84 bd       	out	0x24, r24	; 36
	TCCR0B = 0x09; //start Timer
     428:	89 e0       	ldi	r24, 0x09	; 9
     42a:	85 bd       	out	0x25, r24	; 37
	MCUCR = 0x00;
     42c:	15 be       	out	0x35, r1	; 53
	TIMSK0 = 0x04; //timer interrupt sources
     42e:	84 e0       	ldi	r24, 0x04	; 4
     430:	80 93 6e 00 	sts	0x006E, r24
	sei(); 
     434:	78 94       	sei
}
     436:	08 95       	ret

00000438 <checkInput>:

void checkInput()
{
	if(PINA>=32)
     438:	80 b1       	in	r24, 0x00	; 0
     43a:	80 32       	cpi	r24, 0x20	; 32
     43c:	18 f0       	brcs	.+6      	; 0x444 <checkInput+0xc>
	{
		speedFactor = 1;
     43e:	81 e0       	ldi	r24, 0x01	; 1
     440:	90 e0       	ldi	r25, 0x00	; 0
     442:	20 c0       	rjmp	.+64     	; 0x484 <checkInput+0x4c>
	}
	else if(PINA>=16)
     444:	80 b1       	in	r24, 0x00	; 0
     446:	80 31       	cpi	r24, 0x10	; 16
     448:	18 f0       	brcs	.+6      	; 0x450 <checkInput+0x18>
	{
		speedFactor = 2;
     44a:	82 e0       	ldi	r24, 0x02	; 2
     44c:	90 e0       	ldi	r25, 0x00	; 0
     44e:	1a c0       	rjmp	.+52     	; 0x484 <checkInput+0x4c>
	}
	else if(PINA>=8)
     450:	80 b1       	in	r24, 0x00	; 0
     452:	88 30       	cpi	r24, 0x08	; 8
     454:	18 f0       	brcs	.+6      	; 0x45c <checkInput+0x24>
	{
		speedFactor = 3;
     456:	83 e0       	ldi	r24, 0x03	; 3
     458:	90 e0       	ldi	r25, 0x00	; 0
     45a:	14 c0       	rjmp	.+40     	; 0x484 <checkInput+0x4c>
	}
	else if(PINA>=4)
     45c:	80 b1       	in	r24, 0x00	; 0
     45e:	84 30       	cpi	r24, 0x04	; 4
     460:	18 f0       	brcs	.+6      	; 0x468 <checkInput+0x30>
	{
		speedFactor = 4;
     462:	84 e0       	ldi	r24, 0x04	; 4
     464:	90 e0       	ldi	r25, 0x00	; 0
     466:	0e c0       	rjmp	.+28     	; 0x484 <checkInput+0x4c>
	}
	else if(PINA>=2)
     468:	80 b1       	in	r24, 0x00	; 0
     46a:	82 30       	cpi	r24, 0x02	; 2
     46c:	18 f0       	brcs	.+6      	; 0x474 <checkInput+0x3c>
	{
		speedFactor = 5;
     46e:	85 e0       	ldi	r24, 0x05	; 5
     470:	90 e0       	ldi	r25, 0x00	; 0
     472:	08 c0       	rjmp	.+16     	; 0x484 <checkInput+0x4c>
	}
	else if(PINA>=1)
     474:	80 b1       	in	r24, 0x00	; 0
     476:	88 23       	and	r24, r24
     478:	19 f0       	breq	.+6      	; 0x480 <checkInput+0x48>
	{
		speedFactor = 6;
     47a:	86 e0       	ldi	r24, 0x06	; 6
     47c:	90 e0       	ldi	r25, 0x00	; 0
     47e:	02 c0       	rjmp	.+4      	; 0x484 <checkInput+0x4c>
	}
	else
	{
		speedFactor = 7;
     480:	87 e0       	ldi	r24, 0x07	; 7
     482:	90 e0       	ldi	r25, 0x00	; 0
     484:	90 93 05 01 	sts	0x0105, r25
     488:	80 93 04 01 	sts	0x0104, r24
     48c:	08 95       	ret

0000048e <main>:

void setInterrupt();
void checkInput();

int main(void) 
{
     48e:	8f 92       	push	r8
     490:	9f 92       	push	r9
     492:	af 92       	push	r10
     494:	bf 92       	push	r11
     496:	cf 92       	push	r12
     498:	df 92       	push	r13
     49a:	ef 92       	push	r14
     49c:	ff 92       	push	r15
     49e:	0f 93       	push	r16
     4a0:	1f 93       	push	r17
     4a2:	cf 93       	push	r28
     4a4:	df 93       	push	r29
	//set pins
	PORTB=0x00;
     4a6:	15 b8       	out	0x05, r1	; 5
	DDRB=0xFF;	//output
     4a8:	8f ef       	ldi	r24, 0xFF	; 255
     4aa:	84 b9       	out	0x04, r24	; 4
	DDRC=0xFF;
     4ac:	87 b9       	out	0x07, r24	; 7
	DDRD=0x00;	//input
     4ae:	1a b8       	out	0x0a, r1	; 10
	
	boottest();
     4b0:	0e 94 04 01 	call	0x208	; 0x208 <boottest>
	PORTB=0x00;
     4b4:	15 b8       	out	0x05, r1	; 5
	setPWM1();
     4b6:	0e 94 57 00 	call	0xae	; 0xae <setPWM1>
	setPWM2();
     4ba:	0e 94 7d 00 	call	0xfa	; 0xfa <setPWM2>
	setInterrupt();
     4be:	0e 94 0f 02 	call	0x41e	; 0x41e <setInterrupt>
     4c2:	c0 e0       	ldi	r28, 0x00	; 0
     4c4:	d0 e0       	ldi	r29, 0x00	; 0
     4c6:	58 ec       	ldi	r21, 0xC8	; 200
     4c8:	85 2e       	mov	r8, r21
     4ca:	91 2c       	mov	r9, r1

	int stateRotate	= 0;	//this variable handles the movement of the servo left-right and remove variable 'angle1'
	while(1)
	{
		if(stateRotate)	//used to be: if(OCR1A<angle1)
     4cc:	20 97       	sbiw	r28, 0x00	; 0
     4ce:	99 f0       	breq	.+38     	; 0x4f6 <main+0x68>
		{
			OCR1A+=1;
     4d0:	80 91 88 00 	lds	r24, 0x0088
     4d4:	90 91 89 00 	lds	r25, 0x0089
     4d8:	01 96       	adiw	r24, 0x01	; 1
     4da:	90 93 89 00 	sts	0x0089, r25
     4de:	80 93 88 00 	sts	0x0088, r24
			if(OCR1A>SERVO_1A_MAX)
     4e2:	80 91 88 00 	lds	r24, 0x0088
     4e6:	90 91 89 00 	lds	r25, 0x0089
     4ea:	c0 e0       	ldi	r28, 0x00	; 0
     4ec:	d0 e0       	ldi	r29, 0x00	; 0
     4ee:	8b 5c       	subi	r24, 0xCB	; 203
     4f0:	93 40       	sbci	r25, 0x03	; 3
     4f2:	98 f4       	brcc	.+38     	; 0x51a <main+0x8c>
     4f4:	10 c0       	rjmp	.+32     	; 0x516 <main+0x88>
				stateRotate = 0;
		}
		else	//used to be if(OCR1A>angle1)
		{
			OCR1A-=1;
     4f6:	80 91 88 00 	lds	r24, 0x0088
     4fa:	90 91 89 00 	lds	r25, 0x0089
     4fe:	01 97       	sbiw	r24, 0x01	; 1
     500:	90 93 89 00 	sts	0x0089, r25
     504:	80 93 88 00 	sts	0x0088, r24
			if(OCR1A<SERVO_1A_MIN)
     508:	80 91 88 00 	lds	r24, 0x0088
     50c:	90 91 89 00 	lds	r25, 0x0089
     510:	8a 57       	subi	r24, 0x7A	; 122
     512:	93 40       	sbci	r25, 0x03	; 3
     514:	10 f4       	brcc	.+4      	; 0x51a <main+0x8c>
     516:	c1 e0       	ldi	r28, 0x01	; 1
     518:	d0 e0       	ldi	r29, 0x00	; 0
		/*else
		{
			angle1 = SERVO_1A_MIN + (randomize()% (uint16_t)((SERVO_1A_MAX-SERVO_1A_MIN)/1) );
		}*/

		if(OCR1B<angle2)
     51a:	20 91 8a 00 	lds	r18, 0x008A
     51e:	30 91 8b 00 	lds	r19, 0x008B
     522:	80 91 02 01 	lds	r24, 0x0102
     526:	90 91 03 01 	lds	r25, 0x0103
     52a:	28 17       	cp	r18, r24
     52c:	39 07       	cpc	r19, r25
     52e:	30 f4       	brcc	.+12     	; 0x53c <main+0xae>
		{
			OCR1B+=1;
     530:	80 91 8a 00 	lds	r24, 0x008A
     534:	90 91 8b 00 	lds	r25, 0x008B
     538:	01 96       	adiw	r24, 0x01	; 1
     53a:	10 c0       	rjmp	.+32     	; 0x55c <main+0xce>
		}
		else if(OCR1B>angle2)
     53c:	20 91 8a 00 	lds	r18, 0x008A
     540:	30 91 8b 00 	lds	r19, 0x008B
     544:	80 91 02 01 	lds	r24, 0x0102
     548:	90 91 03 01 	lds	r25, 0x0103
     54c:	82 17       	cp	r24, r18
     54e:	93 07       	cpc	r25, r19
     550:	48 f4       	brcc	.+18     	; 0x564 <main+0xd6>
		{
			OCR1B-=1;
     552:	80 91 8a 00 	lds	r24, 0x008A
     556:	90 91 8b 00 	lds	r25, 0x008B
     55a:	01 97       	sbiw	r24, 0x01	; 1
     55c:	90 93 8b 00 	sts	0x008B, r25
     560:	80 93 8a 00 	sts	0x008A, r24
		else
		{
			//angle2 = SERVO_1B_MIN + (randomize()% (uint16_t)((SERVO_1B_MAX-SERVO_1B_MIN)/1) );
		}
		
		checkInput();
     564:	0e 94 1c 02 	call	0x438	; 0x438 <checkInput>
		_delay_ms(10*speedFactor);
     568:	20 91 04 01 	lds	r18, 0x0104
     56c:	30 91 05 01 	lds	r19, 0x0105
     570:	b9 01       	movw	r22, r18
     572:	43 e0       	ldi	r20, 0x03	; 3
     574:	66 0f       	add	r22, r22
     576:	77 1f       	adc	r23, r23
     578:	4a 95       	dec	r20
     57a:	e1 f7       	brne	.-8      	; 0x574 <main+0xe6>
     57c:	22 0f       	add	r18, r18
     57e:	33 1f       	adc	r19, r19
     580:	62 0f       	add	r22, r18
     582:	73 1f       	adc	r23, r19
     584:	88 27       	eor	r24, r24
     586:	77 fd       	sbrc	r23, 7
     588:	80 95       	com	r24
     58a:	98 2f       	mov	r25, r24
     58c:	0e 94 f7 06 	call	0xdee	; 0xdee <__floatsisf>
     590:	5b 01       	movw	r10, r22
     592:	6c 01       	movw	r12, r24
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     594:	20 e0       	ldi	r18, 0x00	; 0
     596:	30 e0       	ldi	r19, 0x00	; 0
     598:	4a ef       	ldi	r20, 0xFA	; 250
     59a:	54 e4       	ldi	r21, 0x44	; 68
     59c:	0e 94 6d 05 	call	0xada	; 0xada <__mulsf3>
     5a0:	7b 01       	movw	r14, r22
     5a2:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
     5a4:	20 e0       	ldi	r18, 0x00	; 0
     5a6:	30 e0       	ldi	r19, 0x00	; 0
     5a8:	40 e8       	ldi	r20, 0x80	; 128
     5aa:	5f e3       	ldi	r21, 0x3F	; 63
     5ac:	0e 94 c7 06 	call	0xd8e	; 0xd8e <__ltsf2>
     5b0:	88 23       	and	r24, r24
     5b2:	1c f4       	brge	.+6      	; 0x5ba <main+0x12c>
     5b4:	61 e0       	ldi	r22, 0x01	; 1
     5b6:	70 e0       	ldi	r23, 0x00	; 0
     5b8:	22 c0       	rjmp	.+68     	; 0x5fe <main+0x170>
		__ticks = 1;
	else if (__tmp > 65535)
     5ba:	c8 01       	movw	r24, r16
     5bc:	b7 01       	movw	r22, r14
     5be:	20 e0       	ldi	r18, 0x00	; 0
     5c0:	3f ef       	ldi	r19, 0xFF	; 255
     5c2:	4f e7       	ldi	r20, 0x7F	; 127
     5c4:	57 e4       	ldi	r21, 0x47	; 71
     5c6:	0e 94 67 06 	call	0xcce	; 0xcce <__gtsf2>
     5ca:	18 16       	cp	r1, r24
     5cc:	a4 f4       	brge	.+40     	; 0x5f6 <main+0x168>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     5ce:	c6 01       	movw	r24, r12
     5d0:	b5 01       	movw	r22, r10
     5d2:	20 e0       	ldi	r18, 0x00	; 0
     5d4:	30 e0       	ldi	r19, 0x00	; 0
     5d6:	40 e2       	ldi	r20, 0x20	; 32
     5d8:	51 e4       	ldi	r21, 0x41	; 65
     5da:	0e 94 6d 05 	call	0xada	; 0xada <__mulsf3>
     5de:	0e 94 97 03 	call	0x72e	; 0x72e <__fixunssfsi>
     5e2:	05 c0       	rjmp	.+10     	; 0x5ee <main+0x160>
     5e4:	c4 01       	movw	r24, r8
     5e6:	01 97       	sbiw	r24, 0x01	; 1
     5e8:	f1 f7       	brne	.-4      	; 0x5e6 <main+0x158>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     5ea:	61 50       	subi	r22, 0x01	; 1
     5ec:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     5ee:	61 15       	cp	r22, r1
     5f0:	71 05       	cpc	r23, r1
     5f2:	c1 f7       	brne	.-16     	; 0x5e4 <main+0x156>
     5f4:	6b cf       	rjmp	.-298    	; 0x4cc <main+0x3e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     5f6:	c8 01       	movw	r24, r16
     5f8:	b7 01       	movw	r22, r14
     5fa:	0e 94 97 03 	call	0x72e	; 0x72e <__fixunssfsi>
     5fe:	cb 01       	movw	r24, r22
     600:	01 97       	sbiw	r24, 0x01	; 1
     602:	f1 f7       	brne	.-4      	; 0x600 <main+0x172>
     604:	63 cf       	rjmp	.-314    	; 0x4cc <main+0x3e>

00000606 <randomize>:
int randomize()
{
	int random = rand()%251;
     606:	0e 94 4d 0a 	call	0x149a	; 0x149a <rand>
     60a:	6b ef       	ldi	r22, 0xFB	; 251
     60c:	70 e0       	ldi	r23, 0x00	; 0
     60e:	0e 94 b2 09 	call	0x1364	; 0x1364 <__divmodhi4>
	return random;
}
     612:	08 95       	ret

00000614 <testRandom>:

int testRandom()
{
	return randomize(89);
     614:	89 e5       	ldi	r24, 0x59	; 89
     616:	90 e0       	ldi	r25, 0x00	; 0
     618:	0e 94 03 03 	call	0x606	; 0x606 <randomize>
}
     61c:	08 95       	ret

0000061e <randomMotorState>:
void randomMotorState()
{
	motorState = randomize()%2;
     61e:	0e 94 03 03 	call	0x606	; 0x606 <randomize>
     622:	62 e0       	ldi	r22, 0x02	; 2
     624:	70 e0       	ldi	r23, 0x00	; 0
     626:	0e 94 b2 09 	call	0x1364	; 0x1364 <__divmodhi4>
     62a:	90 93 13 02 	sts	0x0213, r25
     62e:	80 93 12 02 	sts	0x0212, r24
	PORTB = motorState;
     632:	80 91 12 02 	lds	r24, 0x0212
     636:	90 91 13 02 	lds	r25, 0x0213
     63a:	85 b9       	out	0x05, r24	; 5
}
     63c:	08 95       	ret

0000063e <__vector_17>:
	}
	//PORTB = PINA;
}

ISR(TIMER0_COMPB_vect) 
{ 
     63e:	1f 92       	push	r1
     640:	0f 92       	push	r0
     642:	0f b6       	in	r0, 0x3f	; 63
     644:	0f 92       	push	r0
     646:	11 24       	eor	r1, r1
     648:	2f 93       	push	r18
     64a:	3f 93       	push	r19
     64c:	4f 93       	push	r20
     64e:	5f 93       	push	r21
     650:	6f 93       	push	r22
     652:	7f 93       	push	r23
     654:	8f 93       	push	r24
     656:	9f 93       	push	r25
     658:	af 93       	push	r26
     65a:	bf 93       	push	r27
     65c:	ef 93       	push	r30
     65e:	ff 93       	push	r31
	
	interruptCount++;
     660:	80 91 14 02 	lds	r24, 0x0214
     664:	90 91 15 02 	lds	r25, 0x0215
     668:	01 96       	adiw	r24, 0x01	; 1
     66a:	90 93 15 02 	sts	0x0215, r25
     66e:	80 93 14 02 	sts	0x0214, r24
	interruptCount2++;
     672:	80 91 16 02 	lds	r24, 0x0216
     676:	90 91 17 02 	lds	r25, 0x0217
     67a:	01 96       	adiw	r24, 0x01	; 1
     67c:	90 93 17 02 	sts	0x0217, r25
     680:	80 93 16 02 	sts	0x0216, r24

	if (interruptCount==3000*speedFactor)
     684:	40 91 14 02 	lds	r20, 0x0214
     688:	50 91 15 02 	lds	r21, 0x0215
     68c:	20 91 04 01 	lds	r18, 0x0104
     690:	30 91 05 01 	lds	r19, 0x0105
     694:	88 eb       	ldi	r24, 0xB8	; 184
     696:	9b e0       	ldi	r25, 0x0B	; 11
     698:	bc 01       	movw	r22, r24
     69a:	26 9f       	mul	r18, r22
     69c:	c0 01       	movw	r24, r0
     69e:	27 9f       	mul	r18, r23
     6a0:	90 0d       	add	r25, r0
     6a2:	36 9f       	mul	r19, r22
     6a4:	90 0d       	add	r25, r0
     6a6:	11 24       	eor	r1, r1
     6a8:	48 17       	cp	r20, r24
     6aa:	59 07       	cpc	r21, r25
     6ac:	e1 f4       	brne	.+56     	; 0x6e6 <__vector_17+0xa8>
	{
		angle1 = SERVO_1A_MIN + (randomize()% (uint16_t)((SERVO_1A_MAX-SERVO_1A_MIN)/1) );
     6ae:	0e 94 03 03 	call	0x606	; 0x606 <randomize>
     6b2:	60 e5       	ldi	r22, 0x50	; 80
     6b4:	70 e0       	ldi	r23, 0x00	; 0
     6b6:	0e 94 9e 09 	call	0x133c	; 0x133c <__udivmodhi4>
     6ba:	86 58       	subi	r24, 0x86	; 134
     6bc:	9c 4f       	sbci	r25, 0xFC	; 252
     6be:	90 93 01 01 	sts	0x0101, r25
     6c2:	80 93 00 01 	sts	0x0100, r24
		angle2 = SERVO_1B_MIN + (randomize()% (uint16_t)((SERVO_1B_MAX-SERVO_1B_MIN)/1) );
     6c6:	0e 94 03 03 	call	0x606	; 0x606 <randomize>
     6ca:	6a e0       	ldi	r22, 0x0A	; 10
     6cc:	70 e0       	ldi	r23, 0x00	; 0
     6ce:	0e 94 9e 09 	call	0x133c	; 0x133c <__udivmodhi4>
     6d2:	83 56       	subi	r24, 0x63	; 99
     6d4:	9c 4f       	sbci	r25, 0xFC	; 252
     6d6:	90 93 03 01 	sts	0x0103, r25
     6da:	80 93 02 01 	sts	0x0102, r24
		interruptCount=0;
     6de:	10 92 15 02 	sts	0x0215, r1
     6e2:	10 92 14 02 	sts	0x0214, r1
	}

	if (interruptCount2==30000)
     6e6:	80 91 16 02 	lds	r24, 0x0216
     6ea:	90 91 17 02 	lds	r25, 0x0217
     6ee:	80 53       	subi	r24, 0x30	; 48
     6f0:	95 47       	sbci	r25, 0x75	; 117
     6f2:	61 f4       	brne	.+24     	; 0x70c <__vector_17+0xce>
	{
		randomMotorState();
     6f4:	0e 94 0f 03 	call	0x61e	; 0x61e <randomMotorState>
		setMotorState(motorState);
     6f8:	80 91 12 02 	lds	r24, 0x0212
     6fc:	90 91 13 02 	lds	r25, 0x0213
     700:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <setMotorState>
		interruptCount2=0;
     704:	10 92 17 02 	sts	0x0217, r1
     708:	10 92 16 02 	sts	0x0216, r1
	}

	//PORTB = angle1;
} 
     70c:	ff 91       	pop	r31
     70e:	ef 91       	pop	r30
     710:	bf 91       	pop	r27
     712:	af 91       	pop	r26
     714:	9f 91       	pop	r25
     716:	8f 91       	pop	r24
     718:	7f 91       	pop	r23
     71a:	6f 91       	pop	r22
     71c:	5f 91       	pop	r21
     71e:	4f 91       	pop	r20
     720:	3f 91       	pop	r19
     722:	2f 91       	pop	r18
     724:	0f 90       	pop	r0
     726:	0f be       	out	0x3f, r0	; 63
     728:	0f 90       	pop	r0
     72a:	1f 90       	pop	r1
     72c:	18 95       	reti

0000072e <__fixunssfsi>:
     72e:	ef 92       	push	r14
     730:	ff 92       	push	r15
     732:	0f 93       	push	r16
     734:	1f 93       	push	r17
     736:	7b 01       	movw	r14, r22
     738:	8c 01       	movw	r16, r24
     73a:	20 e0       	ldi	r18, 0x00	; 0
     73c:	30 e0       	ldi	r19, 0x00	; 0
     73e:	40 e0       	ldi	r20, 0x00	; 0
     740:	5f e4       	ldi	r21, 0x4F	; 79
     742:	0e 94 97 06 	call	0xd2e	; 0xd2e <__gesf2>
     746:	88 23       	and	r24, r24
     748:	8c f0       	brlt	.+34     	; 0x76c <__fixunssfsi+0x3e>
     74a:	c8 01       	movw	r24, r16
     74c:	b7 01       	movw	r22, r14
     74e:	20 e0       	ldi	r18, 0x00	; 0
     750:	30 e0       	ldi	r19, 0x00	; 0
     752:	40 e0       	ldi	r20, 0x00	; 0
     754:	5f e4       	ldi	r21, 0x4F	; 79
     756:	0e 94 0f 05 	call	0xa1e	; 0xa1e <__subsf3>
     75a:	0e 94 55 07 	call	0xeaa	; 0xeaa <__fixsfsi>
     75e:	9b 01       	movw	r18, r22
     760:	ac 01       	movw	r20, r24
     762:	20 50       	subi	r18, 0x00	; 0
     764:	30 40       	sbci	r19, 0x00	; 0
     766:	40 40       	sbci	r20, 0x00	; 0
     768:	50 48       	sbci	r21, 0x80	; 128
     76a:	06 c0       	rjmp	.+12     	; 0x778 <__fixunssfsi+0x4a>
     76c:	c8 01       	movw	r24, r16
     76e:	b7 01       	movw	r22, r14
     770:	0e 94 55 07 	call	0xeaa	; 0xeaa <__fixsfsi>
     774:	9b 01       	movw	r18, r22
     776:	ac 01       	movw	r20, r24
     778:	b9 01       	movw	r22, r18
     77a:	ca 01       	movw	r24, r20
     77c:	1f 91       	pop	r17
     77e:	0f 91       	pop	r16
     780:	ff 90       	pop	r15
     782:	ef 90       	pop	r14
     784:	08 95       	ret

00000786 <_fpadd_parts>:
     786:	a0 e0       	ldi	r26, 0x00	; 0
     788:	b0 e0       	ldi	r27, 0x00	; 0
     78a:	e9 ec       	ldi	r30, 0xC9	; 201
     78c:	f3 e0       	ldi	r31, 0x03	; 3
     78e:	0c 94 c5 09 	jmp	0x138a	; 0x138a <__prologue_saves__>
     792:	dc 01       	movw	r26, r24
     794:	2b 01       	movw	r4, r22
     796:	fa 01       	movw	r30, r20
     798:	9c 91       	ld	r25, X
     79a:	92 30       	cpi	r25, 0x02	; 2
     79c:	08 f4       	brcc	.+2      	; 0x7a0 <_fpadd_parts+0x1a>
     79e:	39 c1       	rjmp	.+626    	; 0xa12 <_fpadd_parts+0x28c>
     7a0:	eb 01       	movw	r28, r22
     7a2:	88 81       	ld	r24, Y
     7a4:	82 30       	cpi	r24, 0x02	; 2
     7a6:	08 f4       	brcc	.+2      	; 0x7aa <_fpadd_parts+0x24>
     7a8:	33 c1       	rjmp	.+614    	; 0xa10 <_fpadd_parts+0x28a>
     7aa:	94 30       	cpi	r25, 0x04	; 4
     7ac:	69 f4       	brne	.+26     	; 0x7c8 <_fpadd_parts+0x42>
     7ae:	84 30       	cpi	r24, 0x04	; 4
     7b0:	09 f0       	breq	.+2      	; 0x7b4 <_fpadd_parts+0x2e>
     7b2:	2f c1       	rjmp	.+606    	; 0xa12 <_fpadd_parts+0x28c>
     7b4:	11 96       	adiw	r26, 0x01	; 1
     7b6:	9c 91       	ld	r25, X
     7b8:	11 97       	sbiw	r26, 0x01	; 1
     7ba:	89 81       	ldd	r24, Y+1	; 0x01
     7bc:	98 17       	cp	r25, r24
     7be:	09 f4       	brne	.+2      	; 0x7c2 <_fpadd_parts+0x3c>
     7c0:	28 c1       	rjmp	.+592    	; 0xa12 <_fpadd_parts+0x28c>
     7c2:	a6 e0       	ldi	r26, 0x06	; 6
     7c4:	b1 e0       	ldi	r27, 0x01	; 1
     7c6:	25 c1       	rjmp	.+586    	; 0xa12 <_fpadd_parts+0x28c>
     7c8:	84 30       	cpi	r24, 0x04	; 4
     7ca:	09 f4       	brne	.+2      	; 0x7ce <_fpadd_parts+0x48>
     7cc:	21 c1       	rjmp	.+578    	; 0xa10 <_fpadd_parts+0x28a>
     7ce:	82 30       	cpi	r24, 0x02	; 2
     7d0:	a9 f4       	brne	.+42     	; 0x7fc <_fpadd_parts+0x76>
     7d2:	92 30       	cpi	r25, 0x02	; 2
     7d4:	09 f0       	breq	.+2      	; 0x7d8 <_fpadd_parts+0x52>
     7d6:	1d c1       	rjmp	.+570    	; 0xa12 <_fpadd_parts+0x28c>
     7d8:	9a 01       	movw	r18, r20
     7da:	ad 01       	movw	r20, r26
     7dc:	88 e0       	ldi	r24, 0x08	; 8
     7de:	ea 01       	movw	r28, r20
     7e0:	09 90       	ld	r0, Y+
     7e2:	ae 01       	movw	r20, r28
     7e4:	e9 01       	movw	r28, r18
     7e6:	09 92       	st	Y+, r0
     7e8:	9e 01       	movw	r18, r28
     7ea:	81 50       	subi	r24, 0x01	; 1
     7ec:	c1 f7       	brne	.-16     	; 0x7de <_fpadd_parts+0x58>
     7ee:	e2 01       	movw	r28, r4
     7f0:	89 81       	ldd	r24, Y+1	; 0x01
     7f2:	11 96       	adiw	r26, 0x01	; 1
     7f4:	9c 91       	ld	r25, X
     7f6:	89 23       	and	r24, r25
     7f8:	81 83       	std	Z+1, r24	; 0x01
     7fa:	08 c1       	rjmp	.+528    	; 0xa0c <_fpadd_parts+0x286>
     7fc:	92 30       	cpi	r25, 0x02	; 2
     7fe:	09 f4       	brne	.+2      	; 0x802 <_fpadd_parts+0x7c>
     800:	07 c1       	rjmp	.+526    	; 0xa10 <_fpadd_parts+0x28a>
     802:	12 96       	adiw	r26, 0x02	; 2
     804:	2d 90       	ld	r2, X+
     806:	3c 90       	ld	r3, X
     808:	13 97       	sbiw	r26, 0x03	; 3
     80a:	eb 01       	movw	r28, r22
     80c:	8a 81       	ldd	r24, Y+2	; 0x02
     80e:	9b 81       	ldd	r25, Y+3	; 0x03
     810:	14 96       	adiw	r26, 0x04	; 4
     812:	ad 90       	ld	r10, X+
     814:	bd 90       	ld	r11, X+
     816:	cd 90       	ld	r12, X+
     818:	dc 90       	ld	r13, X
     81a:	17 97       	sbiw	r26, 0x07	; 7
     81c:	ec 80       	ldd	r14, Y+4	; 0x04
     81e:	fd 80       	ldd	r15, Y+5	; 0x05
     820:	0e 81       	ldd	r16, Y+6	; 0x06
     822:	1f 81       	ldd	r17, Y+7	; 0x07
     824:	91 01       	movw	r18, r2
     826:	28 1b       	sub	r18, r24
     828:	39 0b       	sbc	r19, r25
     82a:	b9 01       	movw	r22, r18
     82c:	37 ff       	sbrs	r19, 7
     82e:	04 c0       	rjmp	.+8      	; 0x838 <_fpadd_parts+0xb2>
     830:	66 27       	eor	r22, r22
     832:	77 27       	eor	r23, r23
     834:	62 1b       	sub	r22, r18
     836:	73 0b       	sbc	r23, r19
     838:	60 32       	cpi	r22, 0x20	; 32
     83a:	71 05       	cpc	r23, r1
     83c:	0c f0       	brlt	.+2      	; 0x840 <_fpadd_parts+0xba>
     83e:	61 c0       	rjmp	.+194    	; 0x902 <_fpadd_parts+0x17c>
     840:	12 16       	cp	r1, r18
     842:	13 06       	cpc	r1, r19
     844:	6c f5       	brge	.+90     	; 0x8a0 <_fpadd_parts+0x11a>
     846:	37 01       	movw	r6, r14
     848:	48 01       	movw	r8, r16
     84a:	06 2e       	mov	r0, r22
     84c:	04 c0       	rjmp	.+8      	; 0x856 <_fpadd_parts+0xd0>
     84e:	96 94       	lsr	r9
     850:	87 94       	ror	r8
     852:	77 94       	ror	r7
     854:	67 94       	ror	r6
     856:	0a 94       	dec	r0
     858:	d2 f7       	brpl	.-12     	; 0x84e <_fpadd_parts+0xc8>
     85a:	21 e0       	ldi	r18, 0x01	; 1
     85c:	30 e0       	ldi	r19, 0x00	; 0
     85e:	40 e0       	ldi	r20, 0x00	; 0
     860:	50 e0       	ldi	r21, 0x00	; 0
     862:	04 c0       	rjmp	.+8      	; 0x86c <_fpadd_parts+0xe6>
     864:	22 0f       	add	r18, r18
     866:	33 1f       	adc	r19, r19
     868:	44 1f       	adc	r20, r20
     86a:	55 1f       	adc	r21, r21
     86c:	6a 95       	dec	r22
     86e:	d2 f7       	brpl	.-12     	; 0x864 <_fpadd_parts+0xde>
     870:	21 50       	subi	r18, 0x01	; 1
     872:	30 40       	sbci	r19, 0x00	; 0
     874:	40 40       	sbci	r20, 0x00	; 0
     876:	50 40       	sbci	r21, 0x00	; 0
     878:	2e 21       	and	r18, r14
     87a:	3f 21       	and	r19, r15
     87c:	40 23       	and	r20, r16
     87e:	51 23       	and	r21, r17
     880:	21 15       	cp	r18, r1
     882:	31 05       	cpc	r19, r1
     884:	41 05       	cpc	r20, r1
     886:	51 05       	cpc	r21, r1
     888:	21 f0       	breq	.+8      	; 0x892 <_fpadd_parts+0x10c>
     88a:	21 e0       	ldi	r18, 0x01	; 1
     88c:	30 e0       	ldi	r19, 0x00	; 0
     88e:	40 e0       	ldi	r20, 0x00	; 0
     890:	50 e0       	ldi	r21, 0x00	; 0
     892:	79 01       	movw	r14, r18
     894:	8a 01       	movw	r16, r20
     896:	e6 28       	or	r14, r6
     898:	f7 28       	or	r15, r7
     89a:	08 29       	or	r16, r8
     89c:	19 29       	or	r17, r9
     89e:	3c c0       	rjmp	.+120    	; 0x918 <_fpadd_parts+0x192>
     8a0:	23 2b       	or	r18, r19
     8a2:	d1 f1       	breq	.+116    	; 0x918 <_fpadd_parts+0x192>
     8a4:	26 0e       	add	r2, r22
     8a6:	37 1e       	adc	r3, r23
     8a8:	35 01       	movw	r6, r10
     8aa:	46 01       	movw	r8, r12
     8ac:	06 2e       	mov	r0, r22
     8ae:	04 c0       	rjmp	.+8      	; 0x8b8 <_fpadd_parts+0x132>
     8b0:	96 94       	lsr	r9
     8b2:	87 94       	ror	r8
     8b4:	77 94       	ror	r7
     8b6:	67 94       	ror	r6
     8b8:	0a 94       	dec	r0
     8ba:	d2 f7       	brpl	.-12     	; 0x8b0 <_fpadd_parts+0x12a>
     8bc:	21 e0       	ldi	r18, 0x01	; 1
     8be:	30 e0       	ldi	r19, 0x00	; 0
     8c0:	40 e0       	ldi	r20, 0x00	; 0
     8c2:	50 e0       	ldi	r21, 0x00	; 0
     8c4:	04 c0       	rjmp	.+8      	; 0x8ce <_fpadd_parts+0x148>
     8c6:	22 0f       	add	r18, r18
     8c8:	33 1f       	adc	r19, r19
     8ca:	44 1f       	adc	r20, r20
     8cc:	55 1f       	adc	r21, r21
     8ce:	6a 95       	dec	r22
     8d0:	d2 f7       	brpl	.-12     	; 0x8c6 <_fpadd_parts+0x140>
     8d2:	21 50       	subi	r18, 0x01	; 1
     8d4:	30 40       	sbci	r19, 0x00	; 0
     8d6:	40 40       	sbci	r20, 0x00	; 0
     8d8:	50 40       	sbci	r21, 0x00	; 0
     8da:	2a 21       	and	r18, r10
     8dc:	3b 21       	and	r19, r11
     8de:	4c 21       	and	r20, r12
     8e0:	5d 21       	and	r21, r13
     8e2:	21 15       	cp	r18, r1
     8e4:	31 05       	cpc	r19, r1
     8e6:	41 05       	cpc	r20, r1
     8e8:	51 05       	cpc	r21, r1
     8ea:	21 f0       	breq	.+8      	; 0x8f4 <_fpadd_parts+0x16e>
     8ec:	21 e0       	ldi	r18, 0x01	; 1
     8ee:	30 e0       	ldi	r19, 0x00	; 0
     8f0:	40 e0       	ldi	r20, 0x00	; 0
     8f2:	50 e0       	ldi	r21, 0x00	; 0
     8f4:	59 01       	movw	r10, r18
     8f6:	6a 01       	movw	r12, r20
     8f8:	a6 28       	or	r10, r6
     8fa:	b7 28       	or	r11, r7
     8fc:	c8 28       	or	r12, r8
     8fe:	d9 28       	or	r13, r9
     900:	0b c0       	rjmp	.+22     	; 0x918 <_fpadd_parts+0x192>
     902:	82 15       	cp	r24, r2
     904:	93 05       	cpc	r25, r3
     906:	2c f0       	brlt	.+10     	; 0x912 <_fpadd_parts+0x18c>
     908:	1c 01       	movw	r2, r24
     90a:	aa 24       	eor	r10, r10
     90c:	bb 24       	eor	r11, r11
     90e:	65 01       	movw	r12, r10
     910:	03 c0       	rjmp	.+6      	; 0x918 <_fpadd_parts+0x192>
     912:	ee 24       	eor	r14, r14
     914:	ff 24       	eor	r15, r15
     916:	87 01       	movw	r16, r14
     918:	11 96       	adiw	r26, 0x01	; 1
     91a:	9c 91       	ld	r25, X
     91c:	d2 01       	movw	r26, r4
     91e:	11 96       	adiw	r26, 0x01	; 1
     920:	8c 91       	ld	r24, X
     922:	98 17       	cp	r25, r24
     924:	09 f4       	brne	.+2      	; 0x928 <_fpadd_parts+0x1a2>
     926:	45 c0       	rjmp	.+138    	; 0x9b2 <_fpadd_parts+0x22c>
     928:	99 23       	and	r25, r25
     92a:	39 f0       	breq	.+14     	; 0x93a <_fpadd_parts+0x1b4>
     92c:	a8 01       	movw	r20, r16
     92e:	97 01       	movw	r18, r14
     930:	2a 19       	sub	r18, r10
     932:	3b 09       	sbc	r19, r11
     934:	4c 09       	sbc	r20, r12
     936:	5d 09       	sbc	r21, r13
     938:	06 c0       	rjmp	.+12     	; 0x946 <_fpadd_parts+0x1c0>
     93a:	a6 01       	movw	r20, r12
     93c:	95 01       	movw	r18, r10
     93e:	2e 19       	sub	r18, r14
     940:	3f 09       	sbc	r19, r15
     942:	40 0b       	sbc	r20, r16
     944:	51 0b       	sbc	r21, r17
     946:	57 fd       	sbrc	r21, 7
     948:	08 c0       	rjmp	.+16     	; 0x95a <_fpadd_parts+0x1d4>
     94a:	11 82       	std	Z+1, r1	; 0x01
     94c:	33 82       	std	Z+3, r3	; 0x03
     94e:	22 82       	std	Z+2, r2	; 0x02
     950:	24 83       	std	Z+4, r18	; 0x04
     952:	35 83       	std	Z+5, r19	; 0x05
     954:	46 83       	std	Z+6, r20	; 0x06
     956:	57 83       	std	Z+7, r21	; 0x07
     958:	1d c0       	rjmp	.+58     	; 0x994 <_fpadd_parts+0x20e>
     95a:	81 e0       	ldi	r24, 0x01	; 1
     95c:	81 83       	std	Z+1, r24	; 0x01
     95e:	33 82       	std	Z+3, r3	; 0x03
     960:	22 82       	std	Z+2, r2	; 0x02
     962:	88 27       	eor	r24, r24
     964:	99 27       	eor	r25, r25
     966:	dc 01       	movw	r26, r24
     968:	82 1b       	sub	r24, r18
     96a:	93 0b       	sbc	r25, r19
     96c:	a4 0b       	sbc	r26, r20
     96e:	b5 0b       	sbc	r27, r21
     970:	84 83       	std	Z+4, r24	; 0x04
     972:	95 83       	std	Z+5, r25	; 0x05
     974:	a6 83       	std	Z+6, r26	; 0x06
     976:	b7 83       	std	Z+7, r27	; 0x07
     978:	0d c0       	rjmp	.+26     	; 0x994 <_fpadd_parts+0x20e>
     97a:	22 0f       	add	r18, r18
     97c:	33 1f       	adc	r19, r19
     97e:	44 1f       	adc	r20, r20
     980:	55 1f       	adc	r21, r21
     982:	24 83       	std	Z+4, r18	; 0x04
     984:	35 83       	std	Z+5, r19	; 0x05
     986:	46 83       	std	Z+6, r20	; 0x06
     988:	57 83       	std	Z+7, r21	; 0x07
     98a:	82 81       	ldd	r24, Z+2	; 0x02
     98c:	93 81       	ldd	r25, Z+3	; 0x03
     98e:	01 97       	sbiw	r24, 0x01	; 1
     990:	93 83       	std	Z+3, r25	; 0x03
     992:	82 83       	std	Z+2, r24	; 0x02
     994:	24 81       	ldd	r18, Z+4	; 0x04
     996:	35 81       	ldd	r19, Z+5	; 0x05
     998:	46 81       	ldd	r20, Z+6	; 0x06
     99a:	57 81       	ldd	r21, Z+7	; 0x07
     99c:	da 01       	movw	r26, r20
     99e:	c9 01       	movw	r24, r18
     9a0:	01 97       	sbiw	r24, 0x01	; 1
     9a2:	a1 09       	sbc	r26, r1
     9a4:	b1 09       	sbc	r27, r1
     9a6:	8f 5f       	subi	r24, 0xFF	; 255
     9a8:	9f 4f       	sbci	r25, 0xFF	; 255
     9aa:	af 4f       	sbci	r26, 0xFF	; 255
     9ac:	bf 43       	sbci	r27, 0x3F	; 63
     9ae:	28 f3       	brcs	.-54     	; 0x97a <_fpadd_parts+0x1f4>
     9b0:	0b c0       	rjmp	.+22     	; 0x9c8 <_fpadd_parts+0x242>
     9b2:	91 83       	std	Z+1, r25	; 0x01
     9b4:	33 82       	std	Z+3, r3	; 0x03
     9b6:	22 82       	std	Z+2, r2	; 0x02
     9b8:	ea 0c       	add	r14, r10
     9ba:	fb 1c       	adc	r15, r11
     9bc:	0c 1d       	adc	r16, r12
     9be:	1d 1d       	adc	r17, r13
     9c0:	e4 82       	std	Z+4, r14	; 0x04
     9c2:	f5 82       	std	Z+5, r15	; 0x05
     9c4:	06 83       	std	Z+6, r16	; 0x06
     9c6:	17 83       	std	Z+7, r17	; 0x07
     9c8:	83 e0       	ldi	r24, 0x03	; 3
     9ca:	80 83       	st	Z, r24
     9cc:	24 81       	ldd	r18, Z+4	; 0x04
     9ce:	35 81       	ldd	r19, Z+5	; 0x05
     9d0:	46 81       	ldd	r20, Z+6	; 0x06
     9d2:	57 81       	ldd	r21, Z+7	; 0x07
     9d4:	57 ff       	sbrs	r21, 7
     9d6:	1a c0       	rjmp	.+52     	; 0xa0c <_fpadd_parts+0x286>
     9d8:	c9 01       	movw	r24, r18
     9da:	aa 27       	eor	r26, r26
     9dc:	97 fd       	sbrc	r25, 7
     9de:	a0 95       	com	r26
     9e0:	ba 2f       	mov	r27, r26
     9e2:	81 70       	andi	r24, 0x01	; 1
     9e4:	90 70       	andi	r25, 0x00	; 0
     9e6:	a0 70       	andi	r26, 0x00	; 0
     9e8:	b0 70       	andi	r27, 0x00	; 0
     9ea:	56 95       	lsr	r21
     9ec:	47 95       	ror	r20
     9ee:	37 95       	ror	r19
     9f0:	27 95       	ror	r18
     9f2:	82 2b       	or	r24, r18
     9f4:	93 2b       	or	r25, r19
     9f6:	a4 2b       	or	r26, r20
     9f8:	b5 2b       	or	r27, r21
     9fa:	84 83       	std	Z+4, r24	; 0x04
     9fc:	95 83       	std	Z+5, r25	; 0x05
     9fe:	a6 83       	std	Z+6, r26	; 0x06
     a00:	b7 83       	std	Z+7, r27	; 0x07
     a02:	82 81       	ldd	r24, Z+2	; 0x02
     a04:	93 81       	ldd	r25, Z+3	; 0x03
     a06:	01 96       	adiw	r24, 0x01	; 1
     a08:	93 83       	std	Z+3, r25	; 0x03
     a0a:	82 83       	std	Z+2, r24	; 0x02
     a0c:	df 01       	movw	r26, r30
     a0e:	01 c0       	rjmp	.+2      	; 0xa12 <_fpadd_parts+0x28c>
     a10:	d2 01       	movw	r26, r4
     a12:	cd 01       	movw	r24, r26
     a14:	cd b7       	in	r28, 0x3d	; 61
     a16:	de b7       	in	r29, 0x3e	; 62
     a18:	e2 e1       	ldi	r30, 0x12	; 18
     a1a:	0c 94 e1 09 	jmp	0x13c2	; 0x13c2 <__epilogue_restores__>

00000a1e <__subsf3>:
     a1e:	a0 e2       	ldi	r26, 0x20	; 32
     a20:	b0 e0       	ldi	r27, 0x00	; 0
     a22:	e5 e1       	ldi	r30, 0x15	; 21
     a24:	f5 e0       	ldi	r31, 0x05	; 5
     a26:	0c 94 d1 09 	jmp	0x13a2	; 0x13a2 <__prologue_saves__+0x18>
     a2a:	69 83       	std	Y+1, r22	; 0x01
     a2c:	7a 83       	std	Y+2, r23	; 0x02
     a2e:	8b 83       	std	Y+3, r24	; 0x03
     a30:	9c 83       	std	Y+4, r25	; 0x04
     a32:	2d 83       	std	Y+5, r18	; 0x05
     a34:	3e 83       	std	Y+6, r19	; 0x06
     a36:	4f 83       	std	Y+7, r20	; 0x07
     a38:	58 87       	std	Y+8, r21	; 0x08
     a3a:	e9 e0       	ldi	r30, 0x09	; 9
     a3c:	ee 2e       	mov	r14, r30
     a3e:	f1 2c       	mov	r15, r1
     a40:	ec 0e       	add	r14, r28
     a42:	fd 1e       	adc	r15, r29
     a44:	ce 01       	movw	r24, r28
     a46:	01 96       	adiw	r24, 0x01	; 1
     a48:	b7 01       	movw	r22, r14
     a4a:	0e 94 cd 08 	call	0x119a	; 0x119a <__unpack_f>
     a4e:	8e 01       	movw	r16, r28
     a50:	0f 5e       	subi	r16, 0xEF	; 239
     a52:	1f 4f       	sbci	r17, 0xFF	; 255
     a54:	ce 01       	movw	r24, r28
     a56:	05 96       	adiw	r24, 0x05	; 5
     a58:	b8 01       	movw	r22, r16
     a5a:	0e 94 cd 08 	call	0x119a	; 0x119a <__unpack_f>
     a5e:	8a 89       	ldd	r24, Y+18	; 0x12
     a60:	91 e0       	ldi	r25, 0x01	; 1
     a62:	89 27       	eor	r24, r25
     a64:	8a 8b       	std	Y+18, r24	; 0x12
     a66:	c7 01       	movw	r24, r14
     a68:	b8 01       	movw	r22, r16
     a6a:	ae 01       	movw	r20, r28
     a6c:	47 5e       	subi	r20, 0xE7	; 231
     a6e:	5f 4f       	sbci	r21, 0xFF	; 255
     a70:	0e 94 c3 03 	call	0x786	; 0x786 <_fpadd_parts>
     a74:	0e 94 f8 07 	call	0xff0	; 0xff0 <__pack_f>
     a78:	a0 96       	adiw	r28, 0x20	; 32
     a7a:	e6 e0       	ldi	r30, 0x06	; 6
     a7c:	0c 94 ed 09 	jmp	0x13da	; 0x13da <__epilogue_restores__+0x18>

00000a80 <__addsf3>:
     a80:	a0 e2       	ldi	r26, 0x20	; 32
     a82:	b0 e0       	ldi	r27, 0x00	; 0
     a84:	e6 e4       	ldi	r30, 0x46	; 70
     a86:	f5 e0       	ldi	r31, 0x05	; 5
     a88:	0c 94 d1 09 	jmp	0x13a2	; 0x13a2 <__prologue_saves__+0x18>
     a8c:	69 83       	std	Y+1, r22	; 0x01
     a8e:	7a 83       	std	Y+2, r23	; 0x02
     a90:	8b 83       	std	Y+3, r24	; 0x03
     a92:	9c 83       	std	Y+4, r25	; 0x04
     a94:	2d 83       	std	Y+5, r18	; 0x05
     a96:	3e 83       	std	Y+6, r19	; 0x06
     a98:	4f 83       	std	Y+7, r20	; 0x07
     a9a:	58 87       	std	Y+8, r21	; 0x08
     a9c:	f9 e0       	ldi	r31, 0x09	; 9
     a9e:	ef 2e       	mov	r14, r31
     aa0:	f1 2c       	mov	r15, r1
     aa2:	ec 0e       	add	r14, r28
     aa4:	fd 1e       	adc	r15, r29
     aa6:	ce 01       	movw	r24, r28
     aa8:	01 96       	adiw	r24, 0x01	; 1
     aaa:	b7 01       	movw	r22, r14
     aac:	0e 94 cd 08 	call	0x119a	; 0x119a <__unpack_f>
     ab0:	8e 01       	movw	r16, r28
     ab2:	0f 5e       	subi	r16, 0xEF	; 239
     ab4:	1f 4f       	sbci	r17, 0xFF	; 255
     ab6:	ce 01       	movw	r24, r28
     ab8:	05 96       	adiw	r24, 0x05	; 5
     aba:	b8 01       	movw	r22, r16
     abc:	0e 94 cd 08 	call	0x119a	; 0x119a <__unpack_f>
     ac0:	c7 01       	movw	r24, r14
     ac2:	b8 01       	movw	r22, r16
     ac4:	ae 01       	movw	r20, r28
     ac6:	47 5e       	subi	r20, 0xE7	; 231
     ac8:	5f 4f       	sbci	r21, 0xFF	; 255
     aca:	0e 94 c3 03 	call	0x786	; 0x786 <_fpadd_parts>
     ace:	0e 94 f8 07 	call	0xff0	; 0xff0 <__pack_f>
     ad2:	a0 96       	adiw	r28, 0x20	; 32
     ad4:	e6 e0       	ldi	r30, 0x06	; 6
     ad6:	0c 94 ed 09 	jmp	0x13da	; 0x13da <__epilogue_restores__+0x18>

00000ada <__mulsf3>:
     ada:	a0 e2       	ldi	r26, 0x20	; 32
     adc:	b0 e0       	ldi	r27, 0x00	; 0
     ade:	e3 e7       	ldi	r30, 0x73	; 115
     ae0:	f5 e0       	ldi	r31, 0x05	; 5
     ae2:	0c 94 c5 09 	jmp	0x138a	; 0x138a <__prologue_saves__>
     ae6:	69 83       	std	Y+1, r22	; 0x01
     ae8:	7a 83       	std	Y+2, r23	; 0x02
     aea:	8b 83       	std	Y+3, r24	; 0x03
     aec:	9c 83       	std	Y+4, r25	; 0x04
     aee:	2d 83       	std	Y+5, r18	; 0x05
     af0:	3e 83       	std	Y+6, r19	; 0x06
     af2:	4f 83       	std	Y+7, r20	; 0x07
     af4:	58 87       	std	Y+8, r21	; 0x08
     af6:	ce 01       	movw	r24, r28
     af8:	01 96       	adiw	r24, 0x01	; 1
     afa:	be 01       	movw	r22, r28
     afc:	67 5f       	subi	r22, 0xF7	; 247
     afe:	7f 4f       	sbci	r23, 0xFF	; 255
     b00:	0e 94 cd 08 	call	0x119a	; 0x119a <__unpack_f>
     b04:	ce 01       	movw	r24, r28
     b06:	05 96       	adiw	r24, 0x05	; 5
     b08:	be 01       	movw	r22, r28
     b0a:	6f 5e       	subi	r22, 0xEF	; 239
     b0c:	7f 4f       	sbci	r23, 0xFF	; 255
     b0e:	0e 94 cd 08 	call	0x119a	; 0x119a <__unpack_f>
     b12:	99 85       	ldd	r25, Y+9	; 0x09
     b14:	92 30       	cpi	r25, 0x02	; 2
     b16:	88 f0       	brcs	.+34     	; 0xb3a <__mulsf3+0x60>
     b18:	89 89       	ldd	r24, Y+17	; 0x11
     b1a:	82 30       	cpi	r24, 0x02	; 2
     b1c:	c8 f0       	brcs	.+50     	; 0xb50 <__mulsf3+0x76>
     b1e:	94 30       	cpi	r25, 0x04	; 4
     b20:	19 f4       	brne	.+6      	; 0xb28 <__mulsf3+0x4e>
     b22:	82 30       	cpi	r24, 0x02	; 2
     b24:	51 f4       	brne	.+20     	; 0xb3a <__mulsf3+0x60>
     b26:	04 c0       	rjmp	.+8      	; 0xb30 <__mulsf3+0x56>
     b28:	84 30       	cpi	r24, 0x04	; 4
     b2a:	29 f4       	brne	.+10     	; 0xb36 <__mulsf3+0x5c>
     b2c:	92 30       	cpi	r25, 0x02	; 2
     b2e:	81 f4       	brne	.+32     	; 0xb50 <__mulsf3+0x76>
     b30:	86 e0       	ldi	r24, 0x06	; 6
     b32:	91 e0       	ldi	r25, 0x01	; 1
     b34:	c6 c0       	rjmp	.+396    	; 0xcc2 <__mulsf3+0x1e8>
     b36:	92 30       	cpi	r25, 0x02	; 2
     b38:	49 f4       	brne	.+18     	; 0xb4c <__mulsf3+0x72>
     b3a:	20 e0       	ldi	r18, 0x00	; 0
     b3c:	9a 85       	ldd	r25, Y+10	; 0x0a
     b3e:	8a 89       	ldd	r24, Y+18	; 0x12
     b40:	98 13       	cpse	r25, r24
     b42:	21 e0       	ldi	r18, 0x01	; 1
     b44:	2a 87       	std	Y+10, r18	; 0x0a
     b46:	ce 01       	movw	r24, r28
     b48:	09 96       	adiw	r24, 0x09	; 9
     b4a:	bb c0       	rjmp	.+374    	; 0xcc2 <__mulsf3+0x1e8>
     b4c:	82 30       	cpi	r24, 0x02	; 2
     b4e:	49 f4       	brne	.+18     	; 0xb62 <__mulsf3+0x88>
     b50:	20 e0       	ldi	r18, 0x00	; 0
     b52:	9a 85       	ldd	r25, Y+10	; 0x0a
     b54:	8a 89       	ldd	r24, Y+18	; 0x12
     b56:	98 13       	cpse	r25, r24
     b58:	21 e0       	ldi	r18, 0x01	; 1
     b5a:	2a 8b       	std	Y+18, r18	; 0x12
     b5c:	ce 01       	movw	r24, r28
     b5e:	41 96       	adiw	r24, 0x11	; 17
     b60:	b0 c0       	rjmp	.+352    	; 0xcc2 <__mulsf3+0x1e8>
     b62:	2d 84       	ldd	r2, Y+13	; 0x0d
     b64:	3e 84       	ldd	r3, Y+14	; 0x0e
     b66:	4f 84       	ldd	r4, Y+15	; 0x0f
     b68:	58 88       	ldd	r5, Y+16	; 0x10
     b6a:	6d 88       	ldd	r6, Y+21	; 0x15
     b6c:	7e 88       	ldd	r7, Y+22	; 0x16
     b6e:	8f 88       	ldd	r8, Y+23	; 0x17
     b70:	98 8c       	ldd	r9, Y+24	; 0x18
     b72:	ee 24       	eor	r14, r14
     b74:	ff 24       	eor	r15, r15
     b76:	87 01       	movw	r16, r14
     b78:	aa 24       	eor	r10, r10
     b7a:	bb 24       	eor	r11, r11
     b7c:	65 01       	movw	r12, r10
     b7e:	40 e0       	ldi	r20, 0x00	; 0
     b80:	50 e0       	ldi	r21, 0x00	; 0
     b82:	60 e0       	ldi	r22, 0x00	; 0
     b84:	70 e0       	ldi	r23, 0x00	; 0
     b86:	e0 e0       	ldi	r30, 0x00	; 0
     b88:	f0 e0       	ldi	r31, 0x00	; 0
     b8a:	c1 01       	movw	r24, r2
     b8c:	81 70       	andi	r24, 0x01	; 1
     b8e:	90 70       	andi	r25, 0x00	; 0
     b90:	89 2b       	or	r24, r25
     b92:	e9 f0       	breq	.+58     	; 0xbce <__mulsf3+0xf4>
     b94:	e6 0c       	add	r14, r6
     b96:	f7 1c       	adc	r15, r7
     b98:	08 1d       	adc	r16, r8
     b9a:	19 1d       	adc	r17, r9
     b9c:	9a 01       	movw	r18, r20
     b9e:	ab 01       	movw	r20, r22
     ba0:	2a 0d       	add	r18, r10
     ba2:	3b 1d       	adc	r19, r11
     ba4:	4c 1d       	adc	r20, r12
     ba6:	5d 1d       	adc	r21, r13
     ba8:	80 e0       	ldi	r24, 0x00	; 0
     baa:	90 e0       	ldi	r25, 0x00	; 0
     bac:	a0 e0       	ldi	r26, 0x00	; 0
     bae:	b0 e0       	ldi	r27, 0x00	; 0
     bb0:	e6 14       	cp	r14, r6
     bb2:	f7 04       	cpc	r15, r7
     bb4:	08 05       	cpc	r16, r8
     bb6:	19 05       	cpc	r17, r9
     bb8:	20 f4       	brcc	.+8      	; 0xbc2 <__mulsf3+0xe8>
     bba:	81 e0       	ldi	r24, 0x01	; 1
     bbc:	90 e0       	ldi	r25, 0x00	; 0
     bbe:	a0 e0       	ldi	r26, 0x00	; 0
     bc0:	b0 e0       	ldi	r27, 0x00	; 0
     bc2:	ba 01       	movw	r22, r20
     bc4:	a9 01       	movw	r20, r18
     bc6:	48 0f       	add	r20, r24
     bc8:	59 1f       	adc	r21, r25
     bca:	6a 1f       	adc	r22, r26
     bcc:	7b 1f       	adc	r23, r27
     bce:	aa 0c       	add	r10, r10
     bd0:	bb 1c       	adc	r11, r11
     bd2:	cc 1c       	adc	r12, r12
     bd4:	dd 1c       	adc	r13, r13
     bd6:	97 fe       	sbrs	r9, 7
     bd8:	08 c0       	rjmp	.+16     	; 0xbea <__mulsf3+0x110>
     bda:	81 e0       	ldi	r24, 0x01	; 1
     bdc:	90 e0       	ldi	r25, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	b0 e0       	ldi	r27, 0x00	; 0
     be2:	a8 2a       	or	r10, r24
     be4:	b9 2a       	or	r11, r25
     be6:	ca 2a       	or	r12, r26
     be8:	db 2a       	or	r13, r27
     bea:	31 96       	adiw	r30, 0x01	; 1
     bec:	e0 32       	cpi	r30, 0x20	; 32
     bee:	f1 05       	cpc	r31, r1
     bf0:	49 f0       	breq	.+18     	; 0xc04 <__mulsf3+0x12a>
     bf2:	66 0c       	add	r6, r6
     bf4:	77 1c       	adc	r7, r7
     bf6:	88 1c       	adc	r8, r8
     bf8:	99 1c       	adc	r9, r9
     bfa:	56 94       	lsr	r5
     bfc:	47 94       	ror	r4
     bfe:	37 94       	ror	r3
     c00:	27 94       	ror	r2
     c02:	c3 cf       	rjmp	.-122    	; 0xb8a <__mulsf3+0xb0>
     c04:	fa 85       	ldd	r31, Y+10	; 0x0a
     c06:	ea 89       	ldd	r30, Y+18	; 0x12
     c08:	2b 89       	ldd	r18, Y+19	; 0x13
     c0a:	3c 89       	ldd	r19, Y+20	; 0x14
     c0c:	8b 85       	ldd	r24, Y+11	; 0x0b
     c0e:	9c 85       	ldd	r25, Y+12	; 0x0c
     c10:	28 0f       	add	r18, r24
     c12:	39 1f       	adc	r19, r25
     c14:	2e 5f       	subi	r18, 0xFE	; 254
     c16:	3f 4f       	sbci	r19, 0xFF	; 255
     c18:	17 c0       	rjmp	.+46     	; 0xc48 <__mulsf3+0x16e>
     c1a:	ca 01       	movw	r24, r20
     c1c:	81 70       	andi	r24, 0x01	; 1
     c1e:	90 70       	andi	r25, 0x00	; 0
     c20:	89 2b       	or	r24, r25
     c22:	61 f0       	breq	.+24     	; 0xc3c <__mulsf3+0x162>
     c24:	16 95       	lsr	r17
     c26:	07 95       	ror	r16
     c28:	f7 94       	ror	r15
     c2a:	e7 94       	ror	r14
     c2c:	80 e0       	ldi	r24, 0x00	; 0
     c2e:	90 e0       	ldi	r25, 0x00	; 0
     c30:	a0 e0       	ldi	r26, 0x00	; 0
     c32:	b0 e8       	ldi	r27, 0x80	; 128
     c34:	e8 2a       	or	r14, r24
     c36:	f9 2a       	or	r15, r25
     c38:	0a 2b       	or	r16, r26
     c3a:	1b 2b       	or	r17, r27
     c3c:	76 95       	lsr	r23
     c3e:	67 95       	ror	r22
     c40:	57 95       	ror	r21
     c42:	47 95       	ror	r20
     c44:	2f 5f       	subi	r18, 0xFF	; 255
     c46:	3f 4f       	sbci	r19, 0xFF	; 255
     c48:	77 fd       	sbrc	r23, 7
     c4a:	e7 cf       	rjmp	.-50     	; 0xc1a <__mulsf3+0x140>
     c4c:	0c c0       	rjmp	.+24     	; 0xc66 <__mulsf3+0x18c>
     c4e:	44 0f       	add	r20, r20
     c50:	55 1f       	adc	r21, r21
     c52:	66 1f       	adc	r22, r22
     c54:	77 1f       	adc	r23, r23
     c56:	17 fd       	sbrc	r17, 7
     c58:	41 60       	ori	r20, 0x01	; 1
     c5a:	ee 0c       	add	r14, r14
     c5c:	ff 1c       	adc	r15, r15
     c5e:	00 1f       	adc	r16, r16
     c60:	11 1f       	adc	r17, r17
     c62:	21 50       	subi	r18, 0x01	; 1
     c64:	30 40       	sbci	r19, 0x00	; 0
     c66:	40 30       	cpi	r20, 0x00	; 0
     c68:	90 e0       	ldi	r25, 0x00	; 0
     c6a:	59 07       	cpc	r21, r25
     c6c:	90 e0       	ldi	r25, 0x00	; 0
     c6e:	69 07       	cpc	r22, r25
     c70:	90 e4       	ldi	r25, 0x40	; 64
     c72:	79 07       	cpc	r23, r25
     c74:	60 f3       	brcs	.-40     	; 0xc4e <__mulsf3+0x174>
     c76:	2b 8f       	std	Y+27, r18	; 0x1b
     c78:	3c 8f       	std	Y+28, r19	; 0x1c
     c7a:	db 01       	movw	r26, r22
     c7c:	ca 01       	movw	r24, r20
     c7e:	8f 77       	andi	r24, 0x7F	; 127
     c80:	90 70       	andi	r25, 0x00	; 0
     c82:	a0 70       	andi	r26, 0x00	; 0
     c84:	b0 70       	andi	r27, 0x00	; 0
     c86:	80 34       	cpi	r24, 0x40	; 64
     c88:	91 05       	cpc	r25, r1
     c8a:	a1 05       	cpc	r26, r1
     c8c:	b1 05       	cpc	r27, r1
     c8e:	61 f4       	brne	.+24     	; 0xca8 <__mulsf3+0x1ce>
     c90:	47 fd       	sbrc	r20, 7
     c92:	0a c0       	rjmp	.+20     	; 0xca8 <__mulsf3+0x1ce>
     c94:	e1 14       	cp	r14, r1
     c96:	f1 04       	cpc	r15, r1
     c98:	01 05       	cpc	r16, r1
     c9a:	11 05       	cpc	r17, r1
     c9c:	29 f0       	breq	.+10     	; 0xca8 <__mulsf3+0x1ce>
     c9e:	40 5c       	subi	r20, 0xC0	; 192
     ca0:	5f 4f       	sbci	r21, 0xFF	; 255
     ca2:	6f 4f       	sbci	r22, 0xFF	; 255
     ca4:	7f 4f       	sbci	r23, 0xFF	; 255
     ca6:	40 78       	andi	r20, 0x80	; 128
     ca8:	1a 8e       	std	Y+26, r1	; 0x1a
     caa:	fe 17       	cp	r31, r30
     cac:	11 f0       	breq	.+4      	; 0xcb2 <__mulsf3+0x1d8>
     cae:	81 e0       	ldi	r24, 0x01	; 1
     cb0:	8a 8f       	std	Y+26, r24	; 0x1a
     cb2:	4d 8f       	std	Y+29, r20	; 0x1d
     cb4:	5e 8f       	std	Y+30, r21	; 0x1e
     cb6:	6f 8f       	std	Y+31, r22	; 0x1f
     cb8:	78 a3       	std	Y+32, r23	; 0x20
     cba:	83 e0       	ldi	r24, 0x03	; 3
     cbc:	89 8f       	std	Y+25, r24	; 0x19
     cbe:	ce 01       	movw	r24, r28
     cc0:	49 96       	adiw	r24, 0x19	; 25
     cc2:	0e 94 f8 07 	call	0xff0	; 0xff0 <__pack_f>
     cc6:	a0 96       	adiw	r28, 0x20	; 32
     cc8:	e2 e1       	ldi	r30, 0x12	; 18
     cca:	0c 94 e1 09 	jmp	0x13c2	; 0x13c2 <__epilogue_restores__>

00000cce <__gtsf2>:
     cce:	a8 e1       	ldi	r26, 0x18	; 24
     cd0:	b0 e0       	ldi	r27, 0x00	; 0
     cd2:	ed e6       	ldi	r30, 0x6D	; 109
     cd4:	f6 e0       	ldi	r31, 0x06	; 6
     cd6:	0c 94 d1 09 	jmp	0x13a2	; 0x13a2 <__prologue_saves__+0x18>
     cda:	69 83       	std	Y+1, r22	; 0x01
     cdc:	7a 83       	std	Y+2, r23	; 0x02
     cde:	8b 83       	std	Y+3, r24	; 0x03
     ce0:	9c 83       	std	Y+4, r25	; 0x04
     ce2:	2d 83       	std	Y+5, r18	; 0x05
     ce4:	3e 83       	std	Y+6, r19	; 0x06
     ce6:	4f 83       	std	Y+7, r20	; 0x07
     ce8:	58 87       	std	Y+8, r21	; 0x08
     cea:	89 e0       	ldi	r24, 0x09	; 9
     cec:	e8 2e       	mov	r14, r24
     cee:	f1 2c       	mov	r15, r1
     cf0:	ec 0e       	add	r14, r28
     cf2:	fd 1e       	adc	r15, r29
     cf4:	ce 01       	movw	r24, r28
     cf6:	01 96       	adiw	r24, 0x01	; 1
     cf8:	b7 01       	movw	r22, r14
     cfa:	0e 94 cd 08 	call	0x119a	; 0x119a <__unpack_f>
     cfe:	8e 01       	movw	r16, r28
     d00:	0f 5e       	subi	r16, 0xEF	; 239
     d02:	1f 4f       	sbci	r17, 0xFF	; 255
     d04:	ce 01       	movw	r24, r28
     d06:	05 96       	adiw	r24, 0x05	; 5
     d08:	b8 01       	movw	r22, r16
     d0a:	0e 94 cd 08 	call	0x119a	; 0x119a <__unpack_f>
     d0e:	89 85       	ldd	r24, Y+9	; 0x09
     d10:	82 30       	cpi	r24, 0x02	; 2
     d12:	40 f0       	brcs	.+16     	; 0xd24 <__gtsf2+0x56>
     d14:	89 89       	ldd	r24, Y+17	; 0x11
     d16:	82 30       	cpi	r24, 0x02	; 2
     d18:	28 f0       	brcs	.+10     	; 0xd24 <__gtsf2+0x56>
     d1a:	c7 01       	movw	r24, r14
     d1c:	b8 01       	movw	r22, r16
     d1e:	0e 94 45 09 	call	0x128a	; 0x128a <__fpcmp_parts_f>
     d22:	01 c0       	rjmp	.+2      	; 0xd26 <__gtsf2+0x58>
     d24:	8f ef       	ldi	r24, 0xFF	; 255
     d26:	68 96       	adiw	r28, 0x18	; 24
     d28:	e6 e0       	ldi	r30, 0x06	; 6
     d2a:	0c 94 ed 09 	jmp	0x13da	; 0x13da <__epilogue_restores__+0x18>

00000d2e <__gesf2>:
     d2e:	a8 e1       	ldi	r26, 0x18	; 24
     d30:	b0 e0       	ldi	r27, 0x00	; 0
     d32:	ed e9       	ldi	r30, 0x9D	; 157
     d34:	f6 e0       	ldi	r31, 0x06	; 6
     d36:	0c 94 d1 09 	jmp	0x13a2	; 0x13a2 <__prologue_saves__+0x18>
     d3a:	69 83       	std	Y+1, r22	; 0x01
     d3c:	7a 83       	std	Y+2, r23	; 0x02
     d3e:	8b 83       	std	Y+3, r24	; 0x03
     d40:	9c 83       	std	Y+4, r25	; 0x04
     d42:	2d 83       	std	Y+5, r18	; 0x05
     d44:	3e 83       	std	Y+6, r19	; 0x06
     d46:	4f 83       	std	Y+7, r20	; 0x07
     d48:	58 87       	std	Y+8, r21	; 0x08
     d4a:	89 e0       	ldi	r24, 0x09	; 9
     d4c:	e8 2e       	mov	r14, r24
     d4e:	f1 2c       	mov	r15, r1
     d50:	ec 0e       	add	r14, r28
     d52:	fd 1e       	adc	r15, r29
     d54:	ce 01       	movw	r24, r28
     d56:	01 96       	adiw	r24, 0x01	; 1
     d58:	b7 01       	movw	r22, r14
     d5a:	0e 94 cd 08 	call	0x119a	; 0x119a <__unpack_f>
     d5e:	8e 01       	movw	r16, r28
     d60:	0f 5e       	subi	r16, 0xEF	; 239
     d62:	1f 4f       	sbci	r17, 0xFF	; 255
     d64:	ce 01       	movw	r24, r28
     d66:	05 96       	adiw	r24, 0x05	; 5
     d68:	b8 01       	movw	r22, r16
     d6a:	0e 94 cd 08 	call	0x119a	; 0x119a <__unpack_f>
     d6e:	89 85       	ldd	r24, Y+9	; 0x09
     d70:	82 30       	cpi	r24, 0x02	; 2
     d72:	40 f0       	brcs	.+16     	; 0xd84 <__gesf2+0x56>
     d74:	89 89       	ldd	r24, Y+17	; 0x11
     d76:	82 30       	cpi	r24, 0x02	; 2
     d78:	28 f0       	brcs	.+10     	; 0xd84 <__gesf2+0x56>
     d7a:	c7 01       	movw	r24, r14
     d7c:	b8 01       	movw	r22, r16
     d7e:	0e 94 45 09 	call	0x128a	; 0x128a <__fpcmp_parts_f>
     d82:	01 c0       	rjmp	.+2      	; 0xd86 <__gesf2+0x58>
     d84:	8f ef       	ldi	r24, 0xFF	; 255
     d86:	68 96       	adiw	r28, 0x18	; 24
     d88:	e6 e0       	ldi	r30, 0x06	; 6
     d8a:	0c 94 ed 09 	jmp	0x13da	; 0x13da <__epilogue_restores__+0x18>

00000d8e <__ltsf2>:
     d8e:	a8 e1       	ldi	r26, 0x18	; 24
     d90:	b0 e0       	ldi	r27, 0x00	; 0
     d92:	ed ec       	ldi	r30, 0xCD	; 205
     d94:	f6 e0       	ldi	r31, 0x06	; 6
     d96:	0c 94 d1 09 	jmp	0x13a2	; 0x13a2 <__prologue_saves__+0x18>
     d9a:	69 83       	std	Y+1, r22	; 0x01
     d9c:	7a 83       	std	Y+2, r23	; 0x02
     d9e:	8b 83       	std	Y+3, r24	; 0x03
     da0:	9c 83       	std	Y+4, r25	; 0x04
     da2:	2d 83       	std	Y+5, r18	; 0x05
     da4:	3e 83       	std	Y+6, r19	; 0x06
     da6:	4f 83       	std	Y+7, r20	; 0x07
     da8:	58 87       	std	Y+8, r21	; 0x08
     daa:	89 e0       	ldi	r24, 0x09	; 9
     dac:	e8 2e       	mov	r14, r24
     dae:	f1 2c       	mov	r15, r1
     db0:	ec 0e       	add	r14, r28
     db2:	fd 1e       	adc	r15, r29
     db4:	ce 01       	movw	r24, r28
     db6:	01 96       	adiw	r24, 0x01	; 1
     db8:	b7 01       	movw	r22, r14
     dba:	0e 94 cd 08 	call	0x119a	; 0x119a <__unpack_f>
     dbe:	8e 01       	movw	r16, r28
     dc0:	0f 5e       	subi	r16, 0xEF	; 239
     dc2:	1f 4f       	sbci	r17, 0xFF	; 255
     dc4:	ce 01       	movw	r24, r28
     dc6:	05 96       	adiw	r24, 0x05	; 5
     dc8:	b8 01       	movw	r22, r16
     dca:	0e 94 cd 08 	call	0x119a	; 0x119a <__unpack_f>
     dce:	89 85       	ldd	r24, Y+9	; 0x09
     dd0:	82 30       	cpi	r24, 0x02	; 2
     dd2:	40 f0       	brcs	.+16     	; 0xde4 <__ltsf2+0x56>
     dd4:	89 89       	ldd	r24, Y+17	; 0x11
     dd6:	82 30       	cpi	r24, 0x02	; 2
     dd8:	28 f0       	brcs	.+10     	; 0xde4 <__ltsf2+0x56>
     dda:	c7 01       	movw	r24, r14
     ddc:	b8 01       	movw	r22, r16
     dde:	0e 94 45 09 	call	0x128a	; 0x128a <__fpcmp_parts_f>
     de2:	01 c0       	rjmp	.+2      	; 0xde6 <__ltsf2+0x58>
     de4:	81 e0       	ldi	r24, 0x01	; 1
     de6:	68 96       	adiw	r28, 0x18	; 24
     de8:	e6 e0       	ldi	r30, 0x06	; 6
     dea:	0c 94 ed 09 	jmp	0x13da	; 0x13da <__epilogue_restores__+0x18>

00000dee <__floatsisf>:
     dee:	a8 e0       	ldi	r26, 0x08	; 8
     df0:	b0 e0       	ldi	r27, 0x00	; 0
     df2:	ed ef       	ldi	r30, 0xFD	; 253
     df4:	f6 e0       	ldi	r31, 0x06	; 6
     df6:	0c 94 ce 09 	jmp	0x139c	; 0x139c <__prologue_saves__+0x12>
     dfa:	9b 01       	movw	r18, r22
     dfc:	ac 01       	movw	r20, r24
     dfe:	83 e0       	ldi	r24, 0x03	; 3
     e00:	89 83       	std	Y+1, r24	; 0x01
     e02:	da 01       	movw	r26, r20
     e04:	c9 01       	movw	r24, r18
     e06:	88 27       	eor	r24, r24
     e08:	b7 fd       	sbrc	r27, 7
     e0a:	83 95       	inc	r24
     e0c:	99 27       	eor	r25, r25
     e0e:	aa 27       	eor	r26, r26
     e10:	bb 27       	eor	r27, r27
     e12:	b8 2e       	mov	r11, r24
     e14:	21 15       	cp	r18, r1
     e16:	31 05       	cpc	r19, r1
     e18:	41 05       	cpc	r20, r1
     e1a:	51 05       	cpc	r21, r1
     e1c:	19 f4       	brne	.+6      	; 0xe24 <__floatsisf+0x36>
     e1e:	82 e0       	ldi	r24, 0x02	; 2
     e20:	89 83       	std	Y+1, r24	; 0x01
     e22:	3a c0       	rjmp	.+116    	; 0xe98 <__floatsisf+0xaa>
     e24:	88 23       	and	r24, r24
     e26:	a9 f0       	breq	.+42     	; 0xe52 <__floatsisf+0x64>
     e28:	20 30       	cpi	r18, 0x00	; 0
     e2a:	80 e0       	ldi	r24, 0x00	; 0
     e2c:	38 07       	cpc	r19, r24
     e2e:	80 e0       	ldi	r24, 0x00	; 0
     e30:	48 07       	cpc	r20, r24
     e32:	80 e8       	ldi	r24, 0x80	; 128
     e34:	58 07       	cpc	r21, r24
     e36:	29 f4       	brne	.+10     	; 0xe42 <__floatsisf+0x54>
     e38:	60 e0       	ldi	r22, 0x00	; 0
     e3a:	70 e0       	ldi	r23, 0x00	; 0
     e3c:	80 e0       	ldi	r24, 0x00	; 0
     e3e:	9f ec       	ldi	r25, 0xCF	; 207
     e40:	30 c0       	rjmp	.+96     	; 0xea2 <__floatsisf+0xb4>
     e42:	ee 24       	eor	r14, r14
     e44:	ff 24       	eor	r15, r15
     e46:	87 01       	movw	r16, r14
     e48:	e2 1a       	sub	r14, r18
     e4a:	f3 0a       	sbc	r15, r19
     e4c:	04 0b       	sbc	r16, r20
     e4e:	15 0b       	sbc	r17, r21
     e50:	02 c0       	rjmp	.+4      	; 0xe56 <__floatsisf+0x68>
     e52:	79 01       	movw	r14, r18
     e54:	8a 01       	movw	r16, r20
     e56:	8e e1       	ldi	r24, 0x1E	; 30
     e58:	c8 2e       	mov	r12, r24
     e5a:	d1 2c       	mov	r13, r1
     e5c:	dc 82       	std	Y+4, r13	; 0x04
     e5e:	cb 82       	std	Y+3, r12	; 0x03
     e60:	ed 82       	std	Y+5, r14	; 0x05
     e62:	fe 82       	std	Y+6, r15	; 0x06
     e64:	0f 83       	std	Y+7, r16	; 0x07
     e66:	18 87       	std	Y+8, r17	; 0x08
     e68:	c8 01       	movw	r24, r16
     e6a:	b7 01       	movw	r22, r14
     e6c:	0e 94 a9 07 	call	0xf52	; 0xf52 <__clzsi2>
     e70:	01 97       	sbiw	r24, 0x01	; 1
     e72:	18 16       	cp	r1, r24
     e74:	19 06       	cpc	r1, r25
     e76:	84 f4       	brge	.+32     	; 0xe98 <__floatsisf+0xaa>
     e78:	08 2e       	mov	r0, r24
     e7a:	04 c0       	rjmp	.+8      	; 0xe84 <__floatsisf+0x96>
     e7c:	ee 0c       	add	r14, r14
     e7e:	ff 1c       	adc	r15, r15
     e80:	00 1f       	adc	r16, r16
     e82:	11 1f       	adc	r17, r17
     e84:	0a 94       	dec	r0
     e86:	d2 f7       	brpl	.-12     	; 0xe7c <__floatsisf+0x8e>
     e88:	ed 82       	std	Y+5, r14	; 0x05
     e8a:	fe 82       	std	Y+6, r15	; 0x06
     e8c:	0f 83       	std	Y+7, r16	; 0x07
     e8e:	18 87       	std	Y+8, r17	; 0x08
     e90:	c8 1a       	sub	r12, r24
     e92:	d9 0a       	sbc	r13, r25
     e94:	dc 82       	std	Y+4, r13	; 0x04
     e96:	cb 82       	std	Y+3, r12	; 0x03
     e98:	ba 82       	std	Y+2, r11	; 0x02
     e9a:	ce 01       	movw	r24, r28
     e9c:	01 96       	adiw	r24, 0x01	; 1
     e9e:	0e 94 f8 07 	call	0xff0	; 0xff0 <__pack_f>
     ea2:	28 96       	adiw	r28, 0x08	; 8
     ea4:	e9 e0       	ldi	r30, 0x09	; 9
     ea6:	0c 94 ea 09 	jmp	0x13d4	; 0x13d4 <__epilogue_restores__+0x12>

00000eaa <__fixsfsi>:
     eaa:	ac e0       	ldi	r26, 0x0C	; 12
     eac:	b0 e0       	ldi	r27, 0x00	; 0
     eae:	eb e5       	ldi	r30, 0x5B	; 91
     eb0:	f7 e0       	ldi	r31, 0x07	; 7
     eb2:	0c 94 d5 09 	jmp	0x13aa	; 0x13aa <__prologue_saves__+0x20>
     eb6:	69 83       	std	Y+1, r22	; 0x01
     eb8:	7a 83       	std	Y+2, r23	; 0x02
     eba:	8b 83       	std	Y+3, r24	; 0x03
     ebc:	9c 83       	std	Y+4, r25	; 0x04
     ebe:	ce 01       	movw	r24, r28
     ec0:	01 96       	adiw	r24, 0x01	; 1
     ec2:	be 01       	movw	r22, r28
     ec4:	6b 5f       	subi	r22, 0xFB	; 251
     ec6:	7f 4f       	sbci	r23, 0xFF	; 255
     ec8:	0e 94 cd 08 	call	0x119a	; 0x119a <__unpack_f>
     ecc:	8d 81       	ldd	r24, Y+5	; 0x05
     ece:	82 30       	cpi	r24, 0x02	; 2
     ed0:	61 f1       	breq	.+88     	; 0xf2a <__fixsfsi+0x80>
     ed2:	82 30       	cpi	r24, 0x02	; 2
     ed4:	50 f1       	brcs	.+84     	; 0xf2a <__fixsfsi+0x80>
     ed6:	84 30       	cpi	r24, 0x04	; 4
     ed8:	21 f4       	brne	.+8      	; 0xee2 <__fixsfsi+0x38>
     eda:	8e 81       	ldd	r24, Y+6	; 0x06
     edc:	88 23       	and	r24, r24
     ede:	51 f1       	breq	.+84     	; 0xf34 <__fixsfsi+0x8a>
     ee0:	2e c0       	rjmp	.+92     	; 0xf3e <__fixsfsi+0x94>
     ee2:	2f 81       	ldd	r18, Y+7	; 0x07
     ee4:	38 85       	ldd	r19, Y+8	; 0x08
     ee6:	37 fd       	sbrc	r19, 7
     ee8:	20 c0       	rjmp	.+64     	; 0xf2a <__fixsfsi+0x80>
     eea:	6e 81       	ldd	r22, Y+6	; 0x06
     eec:	2f 31       	cpi	r18, 0x1F	; 31
     eee:	31 05       	cpc	r19, r1
     ef0:	1c f0       	brlt	.+6      	; 0xef8 <__fixsfsi+0x4e>
     ef2:	66 23       	and	r22, r22
     ef4:	f9 f0       	breq	.+62     	; 0xf34 <__fixsfsi+0x8a>
     ef6:	23 c0       	rjmp	.+70     	; 0xf3e <__fixsfsi+0x94>
     ef8:	8e e1       	ldi	r24, 0x1E	; 30
     efa:	90 e0       	ldi	r25, 0x00	; 0
     efc:	82 1b       	sub	r24, r18
     efe:	93 0b       	sbc	r25, r19
     f00:	29 85       	ldd	r18, Y+9	; 0x09
     f02:	3a 85       	ldd	r19, Y+10	; 0x0a
     f04:	4b 85       	ldd	r20, Y+11	; 0x0b
     f06:	5c 85       	ldd	r21, Y+12	; 0x0c
     f08:	04 c0       	rjmp	.+8      	; 0xf12 <__fixsfsi+0x68>
     f0a:	56 95       	lsr	r21
     f0c:	47 95       	ror	r20
     f0e:	37 95       	ror	r19
     f10:	27 95       	ror	r18
     f12:	8a 95       	dec	r24
     f14:	d2 f7       	brpl	.-12     	; 0xf0a <__fixsfsi+0x60>
     f16:	66 23       	and	r22, r22
     f18:	b1 f0       	breq	.+44     	; 0xf46 <__fixsfsi+0x9c>
     f1a:	50 95       	com	r21
     f1c:	40 95       	com	r20
     f1e:	30 95       	com	r19
     f20:	21 95       	neg	r18
     f22:	3f 4f       	sbci	r19, 0xFF	; 255
     f24:	4f 4f       	sbci	r20, 0xFF	; 255
     f26:	5f 4f       	sbci	r21, 0xFF	; 255
     f28:	0e c0       	rjmp	.+28     	; 0xf46 <__fixsfsi+0x9c>
     f2a:	20 e0       	ldi	r18, 0x00	; 0
     f2c:	30 e0       	ldi	r19, 0x00	; 0
     f2e:	40 e0       	ldi	r20, 0x00	; 0
     f30:	50 e0       	ldi	r21, 0x00	; 0
     f32:	09 c0       	rjmp	.+18     	; 0xf46 <__fixsfsi+0x9c>
     f34:	2f ef       	ldi	r18, 0xFF	; 255
     f36:	3f ef       	ldi	r19, 0xFF	; 255
     f38:	4f ef       	ldi	r20, 0xFF	; 255
     f3a:	5f e7       	ldi	r21, 0x7F	; 127
     f3c:	04 c0       	rjmp	.+8      	; 0xf46 <__fixsfsi+0x9c>
     f3e:	20 e0       	ldi	r18, 0x00	; 0
     f40:	30 e0       	ldi	r19, 0x00	; 0
     f42:	40 e0       	ldi	r20, 0x00	; 0
     f44:	50 e8       	ldi	r21, 0x80	; 128
     f46:	b9 01       	movw	r22, r18
     f48:	ca 01       	movw	r24, r20
     f4a:	2c 96       	adiw	r28, 0x0c	; 12
     f4c:	e2 e0       	ldi	r30, 0x02	; 2
     f4e:	0c 94 f1 09 	jmp	0x13e2	; 0x13e2 <__epilogue_restores__+0x20>

00000f52 <__clzsi2>:
     f52:	ef 92       	push	r14
     f54:	ff 92       	push	r15
     f56:	0f 93       	push	r16
     f58:	1f 93       	push	r17
     f5a:	7b 01       	movw	r14, r22
     f5c:	8c 01       	movw	r16, r24
     f5e:	80 e0       	ldi	r24, 0x00	; 0
     f60:	e8 16       	cp	r14, r24
     f62:	80 e0       	ldi	r24, 0x00	; 0
     f64:	f8 06       	cpc	r15, r24
     f66:	81 e0       	ldi	r24, 0x01	; 1
     f68:	08 07       	cpc	r16, r24
     f6a:	80 e0       	ldi	r24, 0x00	; 0
     f6c:	18 07       	cpc	r17, r24
     f6e:	88 f4       	brcc	.+34     	; 0xf92 <__clzsi2+0x40>
     f70:	8f ef       	ldi	r24, 0xFF	; 255
     f72:	e8 16       	cp	r14, r24
     f74:	f1 04       	cpc	r15, r1
     f76:	01 05       	cpc	r16, r1
     f78:	11 05       	cpc	r17, r1
     f7a:	31 f0       	breq	.+12     	; 0xf88 <__clzsi2+0x36>
     f7c:	28 f0       	brcs	.+10     	; 0xf88 <__clzsi2+0x36>
     f7e:	88 e0       	ldi	r24, 0x08	; 8
     f80:	90 e0       	ldi	r25, 0x00	; 0
     f82:	a0 e0       	ldi	r26, 0x00	; 0
     f84:	b0 e0       	ldi	r27, 0x00	; 0
     f86:	17 c0       	rjmp	.+46     	; 0xfb6 <__clzsi2+0x64>
     f88:	80 e0       	ldi	r24, 0x00	; 0
     f8a:	90 e0       	ldi	r25, 0x00	; 0
     f8c:	a0 e0       	ldi	r26, 0x00	; 0
     f8e:	b0 e0       	ldi	r27, 0x00	; 0
     f90:	12 c0       	rjmp	.+36     	; 0xfb6 <__clzsi2+0x64>
     f92:	80 e0       	ldi	r24, 0x00	; 0
     f94:	e8 16       	cp	r14, r24
     f96:	80 e0       	ldi	r24, 0x00	; 0
     f98:	f8 06       	cpc	r15, r24
     f9a:	80 e0       	ldi	r24, 0x00	; 0
     f9c:	08 07       	cpc	r16, r24
     f9e:	81 e0       	ldi	r24, 0x01	; 1
     fa0:	18 07       	cpc	r17, r24
     fa2:	28 f0       	brcs	.+10     	; 0xfae <__clzsi2+0x5c>
     fa4:	88 e1       	ldi	r24, 0x18	; 24
     fa6:	90 e0       	ldi	r25, 0x00	; 0
     fa8:	a0 e0       	ldi	r26, 0x00	; 0
     faa:	b0 e0       	ldi	r27, 0x00	; 0
     fac:	04 c0       	rjmp	.+8      	; 0xfb6 <__clzsi2+0x64>
     fae:	80 e1       	ldi	r24, 0x10	; 16
     fb0:	90 e0       	ldi	r25, 0x00	; 0
     fb2:	a0 e0       	ldi	r26, 0x00	; 0
     fb4:	b0 e0       	ldi	r27, 0x00	; 0
     fb6:	20 e2       	ldi	r18, 0x20	; 32
     fb8:	30 e0       	ldi	r19, 0x00	; 0
     fba:	40 e0       	ldi	r20, 0x00	; 0
     fbc:	50 e0       	ldi	r21, 0x00	; 0
     fbe:	28 1b       	sub	r18, r24
     fc0:	39 0b       	sbc	r19, r25
     fc2:	4a 0b       	sbc	r20, r26
     fc4:	5b 0b       	sbc	r21, r27
     fc6:	04 c0       	rjmp	.+8      	; 0xfd0 <__clzsi2+0x7e>
     fc8:	16 95       	lsr	r17
     fca:	07 95       	ror	r16
     fcc:	f7 94       	ror	r15
     fce:	e7 94       	ror	r14
     fd0:	8a 95       	dec	r24
     fd2:	d2 f7       	brpl	.-12     	; 0xfc8 <__clzsi2+0x76>
     fd4:	f7 01       	movw	r30, r14
     fd6:	e2 5f       	subi	r30, 0xF2	; 242
     fd8:	fe 4f       	sbci	r31, 0xFE	; 254
     fda:	80 81       	ld	r24, Z
     fdc:	28 1b       	sub	r18, r24
     fde:	31 09       	sbc	r19, r1
     fe0:	41 09       	sbc	r20, r1
     fe2:	51 09       	sbc	r21, r1
     fe4:	c9 01       	movw	r24, r18
     fe6:	1f 91       	pop	r17
     fe8:	0f 91       	pop	r16
     fea:	ff 90       	pop	r15
     fec:	ef 90       	pop	r14
     fee:	08 95       	ret

00000ff0 <__pack_f>:
     ff0:	df 92       	push	r13
     ff2:	ef 92       	push	r14
     ff4:	ff 92       	push	r15
     ff6:	0f 93       	push	r16
     ff8:	1f 93       	push	r17
     ffa:	fc 01       	movw	r30, r24
     ffc:	e4 80       	ldd	r14, Z+4	; 0x04
     ffe:	f5 80       	ldd	r15, Z+5	; 0x05
    1000:	06 81       	ldd	r16, Z+6	; 0x06
    1002:	17 81       	ldd	r17, Z+7	; 0x07
    1004:	d1 80       	ldd	r13, Z+1	; 0x01
    1006:	80 81       	ld	r24, Z
    1008:	82 30       	cpi	r24, 0x02	; 2
    100a:	48 f4       	brcc	.+18     	; 0x101e <__pack_f+0x2e>
    100c:	80 e0       	ldi	r24, 0x00	; 0
    100e:	90 e0       	ldi	r25, 0x00	; 0
    1010:	a0 e1       	ldi	r26, 0x10	; 16
    1012:	b0 e0       	ldi	r27, 0x00	; 0
    1014:	e8 2a       	or	r14, r24
    1016:	f9 2a       	or	r15, r25
    1018:	0a 2b       	or	r16, r26
    101a:	1b 2b       	or	r17, r27
    101c:	a5 c0       	rjmp	.+330    	; 0x1168 <__stack+0x69>
    101e:	84 30       	cpi	r24, 0x04	; 4
    1020:	09 f4       	brne	.+2      	; 0x1024 <__pack_f+0x34>
    1022:	9f c0       	rjmp	.+318    	; 0x1162 <__stack+0x63>
    1024:	82 30       	cpi	r24, 0x02	; 2
    1026:	21 f4       	brne	.+8      	; 0x1030 <__pack_f+0x40>
    1028:	ee 24       	eor	r14, r14
    102a:	ff 24       	eor	r15, r15
    102c:	87 01       	movw	r16, r14
    102e:	05 c0       	rjmp	.+10     	; 0x103a <__pack_f+0x4a>
    1030:	e1 14       	cp	r14, r1
    1032:	f1 04       	cpc	r15, r1
    1034:	01 05       	cpc	r16, r1
    1036:	11 05       	cpc	r17, r1
    1038:	19 f4       	brne	.+6      	; 0x1040 <__pack_f+0x50>
    103a:	e0 e0       	ldi	r30, 0x00	; 0
    103c:	f0 e0       	ldi	r31, 0x00	; 0
    103e:	96 c0       	rjmp	.+300    	; 0x116c <__stack+0x6d>
    1040:	62 81       	ldd	r22, Z+2	; 0x02
    1042:	73 81       	ldd	r23, Z+3	; 0x03
    1044:	9f ef       	ldi	r25, 0xFF	; 255
    1046:	62 38       	cpi	r22, 0x82	; 130
    1048:	79 07       	cpc	r23, r25
    104a:	0c f0       	brlt	.+2      	; 0x104e <__pack_f+0x5e>
    104c:	5b c0       	rjmp	.+182    	; 0x1104 <__stack+0x5>
    104e:	22 e8       	ldi	r18, 0x82	; 130
    1050:	3f ef       	ldi	r19, 0xFF	; 255
    1052:	26 1b       	sub	r18, r22
    1054:	37 0b       	sbc	r19, r23
    1056:	2a 31       	cpi	r18, 0x1A	; 26
    1058:	31 05       	cpc	r19, r1
    105a:	2c f0       	brlt	.+10     	; 0x1066 <__pack_f+0x76>
    105c:	20 e0       	ldi	r18, 0x00	; 0
    105e:	30 e0       	ldi	r19, 0x00	; 0
    1060:	40 e0       	ldi	r20, 0x00	; 0
    1062:	50 e0       	ldi	r21, 0x00	; 0
    1064:	2a c0       	rjmp	.+84     	; 0x10ba <__pack_f+0xca>
    1066:	b8 01       	movw	r22, r16
    1068:	a7 01       	movw	r20, r14
    106a:	02 2e       	mov	r0, r18
    106c:	04 c0       	rjmp	.+8      	; 0x1076 <__pack_f+0x86>
    106e:	76 95       	lsr	r23
    1070:	67 95       	ror	r22
    1072:	57 95       	ror	r21
    1074:	47 95       	ror	r20
    1076:	0a 94       	dec	r0
    1078:	d2 f7       	brpl	.-12     	; 0x106e <__pack_f+0x7e>
    107a:	81 e0       	ldi	r24, 0x01	; 1
    107c:	90 e0       	ldi	r25, 0x00	; 0
    107e:	a0 e0       	ldi	r26, 0x00	; 0
    1080:	b0 e0       	ldi	r27, 0x00	; 0
    1082:	04 c0       	rjmp	.+8      	; 0x108c <__pack_f+0x9c>
    1084:	88 0f       	add	r24, r24
    1086:	99 1f       	adc	r25, r25
    1088:	aa 1f       	adc	r26, r26
    108a:	bb 1f       	adc	r27, r27
    108c:	2a 95       	dec	r18
    108e:	d2 f7       	brpl	.-12     	; 0x1084 <__pack_f+0x94>
    1090:	01 97       	sbiw	r24, 0x01	; 1
    1092:	a1 09       	sbc	r26, r1
    1094:	b1 09       	sbc	r27, r1
    1096:	8e 21       	and	r24, r14
    1098:	9f 21       	and	r25, r15
    109a:	a0 23       	and	r26, r16
    109c:	b1 23       	and	r27, r17
    109e:	00 97       	sbiw	r24, 0x00	; 0
    10a0:	a1 05       	cpc	r26, r1
    10a2:	b1 05       	cpc	r27, r1
    10a4:	21 f0       	breq	.+8      	; 0x10ae <__pack_f+0xbe>
    10a6:	81 e0       	ldi	r24, 0x01	; 1
    10a8:	90 e0       	ldi	r25, 0x00	; 0
    10aa:	a0 e0       	ldi	r26, 0x00	; 0
    10ac:	b0 e0       	ldi	r27, 0x00	; 0
    10ae:	9a 01       	movw	r18, r20
    10b0:	ab 01       	movw	r20, r22
    10b2:	28 2b       	or	r18, r24
    10b4:	39 2b       	or	r19, r25
    10b6:	4a 2b       	or	r20, r26
    10b8:	5b 2b       	or	r21, r27
    10ba:	da 01       	movw	r26, r20
    10bc:	c9 01       	movw	r24, r18
    10be:	8f 77       	andi	r24, 0x7F	; 127
    10c0:	90 70       	andi	r25, 0x00	; 0
    10c2:	a0 70       	andi	r26, 0x00	; 0
    10c4:	b0 70       	andi	r27, 0x00	; 0
    10c6:	80 34       	cpi	r24, 0x40	; 64
    10c8:	91 05       	cpc	r25, r1
    10ca:	a1 05       	cpc	r26, r1
    10cc:	b1 05       	cpc	r27, r1
    10ce:	39 f4       	brne	.+14     	; 0x10de <__pack_f+0xee>
    10d0:	27 ff       	sbrs	r18, 7
    10d2:	09 c0       	rjmp	.+18     	; 0x10e6 <__pack_f+0xf6>
    10d4:	20 5c       	subi	r18, 0xC0	; 192
    10d6:	3f 4f       	sbci	r19, 0xFF	; 255
    10d8:	4f 4f       	sbci	r20, 0xFF	; 255
    10da:	5f 4f       	sbci	r21, 0xFF	; 255
    10dc:	04 c0       	rjmp	.+8      	; 0x10e6 <__pack_f+0xf6>
    10de:	21 5c       	subi	r18, 0xC1	; 193
    10e0:	3f 4f       	sbci	r19, 0xFF	; 255
    10e2:	4f 4f       	sbci	r20, 0xFF	; 255
    10e4:	5f 4f       	sbci	r21, 0xFF	; 255
    10e6:	e0 e0       	ldi	r30, 0x00	; 0
    10e8:	f0 e0       	ldi	r31, 0x00	; 0
    10ea:	20 30       	cpi	r18, 0x00	; 0
    10ec:	a0 e0       	ldi	r26, 0x00	; 0
    10ee:	3a 07       	cpc	r19, r26
    10f0:	a0 e0       	ldi	r26, 0x00	; 0
    10f2:	4a 07       	cpc	r20, r26
    10f4:	a0 e4       	ldi	r26, 0x40	; 64
    10f6:	5a 07       	cpc	r21, r26
    10f8:	10 f0       	brcs	.+4      	; 0x10fe <__pack_f+0x10e>
    10fa:	e1 e0       	ldi	r30, 0x01	; 1
    10fc:	f0 e0       	ldi	r31, 0x00	; 0
    10fe:	79 01       	movw	r14, r18
    1100:	8a 01       	movw	r16, r20
    1102:	27 c0       	rjmp	.+78     	; 0x1152 <__stack+0x53>
    1104:	60 38       	cpi	r22, 0x80	; 128
    1106:	71 05       	cpc	r23, r1
    1108:	64 f5       	brge	.+88     	; 0x1162 <__stack+0x63>
    110a:	fb 01       	movw	r30, r22
    110c:	e1 58       	subi	r30, 0x81	; 129
    110e:	ff 4f       	sbci	r31, 0xFF	; 255
    1110:	d8 01       	movw	r26, r16
    1112:	c7 01       	movw	r24, r14
    1114:	8f 77       	andi	r24, 0x7F	; 127
    1116:	90 70       	andi	r25, 0x00	; 0
    1118:	a0 70       	andi	r26, 0x00	; 0
    111a:	b0 70       	andi	r27, 0x00	; 0
    111c:	80 34       	cpi	r24, 0x40	; 64
    111e:	91 05       	cpc	r25, r1
    1120:	a1 05       	cpc	r26, r1
    1122:	b1 05       	cpc	r27, r1
    1124:	39 f4       	brne	.+14     	; 0x1134 <__stack+0x35>
    1126:	e7 fe       	sbrs	r14, 7
    1128:	0d c0       	rjmp	.+26     	; 0x1144 <__stack+0x45>
    112a:	80 e4       	ldi	r24, 0x40	; 64
    112c:	90 e0       	ldi	r25, 0x00	; 0
    112e:	a0 e0       	ldi	r26, 0x00	; 0
    1130:	b0 e0       	ldi	r27, 0x00	; 0
    1132:	04 c0       	rjmp	.+8      	; 0x113c <__stack+0x3d>
    1134:	8f e3       	ldi	r24, 0x3F	; 63
    1136:	90 e0       	ldi	r25, 0x00	; 0
    1138:	a0 e0       	ldi	r26, 0x00	; 0
    113a:	b0 e0       	ldi	r27, 0x00	; 0
    113c:	e8 0e       	add	r14, r24
    113e:	f9 1e       	adc	r15, r25
    1140:	0a 1f       	adc	r16, r26
    1142:	1b 1f       	adc	r17, r27
    1144:	17 ff       	sbrs	r17, 7
    1146:	05 c0       	rjmp	.+10     	; 0x1152 <__stack+0x53>
    1148:	16 95       	lsr	r17
    114a:	07 95       	ror	r16
    114c:	f7 94       	ror	r15
    114e:	e7 94       	ror	r14
    1150:	31 96       	adiw	r30, 0x01	; 1
    1152:	87 e0       	ldi	r24, 0x07	; 7
    1154:	16 95       	lsr	r17
    1156:	07 95       	ror	r16
    1158:	f7 94       	ror	r15
    115a:	e7 94       	ror	r14
    115c:	8a 95       	dec	r24
    115e:	d1 f7       	brne	.-12     	; 0x1154 <__stack+0x55>
    1160:	05 c0       	rjmp	.+10     	; 0x116c <__stack+0x6d>
    1162:	ee 24       	eor	r14, r14
    1164:	ff 24       	eor	r15, r15
    1166:	87 01       	movw	r16, r14
    1168:	ef ef       	ldi	r30, 0xFF	; 255
    116a:	f0 e0       	ldi	r31, 0x00	; 0
    116c:	6e 2f       	mov	r22, r30
    116e:	67 95       	ror	r22
    1170:	66 27       	eor	r22, r22
    1172:	67 95       	ror	r22
    1174:	90 2f       	mov	r25, r16
    1176:	9f 77       	andi	r25, 0x7F	; 127
    1178:	d7 94       	ror	r13
    117a:	dd 24       	eor	r13, r13
    117c:	d7 94       	ror	r13
    117e:	8e 2f       	mov	r24, r30
    1180:	86 95       	lsr	r24
    1182:	49 2f       	mov	r20, r25
    1184:	46 2b       	or	r20, r22
    1186:	58 2f       	mov	r21, r24
    1188:	5d 29       	or	r21, r13
    118a:	b7 01       	movw	r22, r14
    118c:	ca 01       	movw	r24, r20
    118e:	1f 91       	pop	r17
    1190:	0f 91       	pop	r16
    1192:	ff 90       	pop	r15
    1194:	ef 90       	pop	r14
    1196:	df 90       	pop	r13
    1198:	08 95       	ret

0000119a <__unpack_f>:
    119a:	fc 01       	movw	r30, r24
    119c:	db 01       	movw	r26, r22
    119e:	40 81       	ld	r20, Z
    11a0:	51 81       	ldd	r21, Z+1	; 0x01
    11a2:	22 81       	ldd	r18, Z+2	; 0x02
    11a4:	62 2f       	mov	r22, r18
    11a6:	6f 77       	andi	r22, 0x7F	; 127
    11a8:	70 e0       	ldi	r23, 0x00	; 0
    11aa:	22 1f       	adc	r18, r18
    11ac:	22 27       	eor	r18, r18
    11ae:	22 1f       	adc	r18, r18
    11b0:	93 81       	ldd	r25, Z+3	; 0x03
    11b2:	89 2f       	mov	r24, r25
    11b4:	88 0f       	add	r24, r24
    11b6:	82 2b       	or	r24, r18
    11b8:	28 2f       	mov	r18, r24
    11ba:	30 e0       	ldi	r19, 0x00	; 0
    11bc:	99 1f       	adc	r25, r25
    11be:	99 27       	eor	r25, r25
    11c0:	99 1f       	adc	r25, r25
    11c2:	11 96       	adiw	r26, 0x01	; 1
    11c4:	9c 93       	st	X, r25
    11c6:	11 97       	sbiw	r26, 0x01	; 1
    11c8:	21 15       	cp	r18, r1
    11ca:	31 05       	cpc	r19, r1
    11cc:	a9 f5       	brne	.+106    	; 0x1238 <__unpack_f+0x9e>
    11ce:	41 15       	cp	r20, r1
    11d0:	51 05       	cpc	r21, r1
    11d2:	61 05       	cpc	r22, r1
    11d4:	71 05       	cpc	r23, r1
    11d6:	11 f4       	brne	.+4      	; 0x11dc <__unpack_f+0x42>
    11d8:	82 e0       	ldi	r24, 0x02	; 2
    11da:	37 c0       	rjmp	.+110    	; 0x124a <__unpack_f+0xb0>
    11dc:	82 e8       	ldi	r24, 0x82	; 130
    11de:	9f ef       	ldi	r25, 0xFF	; 255
    11e0:	13 96       	adiw	r26, 0x03	; 3
    11e2:	9c 93       	st	X, r25
    11e4:	8e 93       	st	-X, r24
    11e6:	12 97       	sbiw	r26, 0x02	; 2
    11e8:	9a 01       	movw	r18, r20
    11ea:	ab 01       	movw	r20, r22
    11ec:	67 e0       	ldi	r22, 0x07	; 7
    11ee:	22 0f       	add	r18, r18
    11f0:	33 1f       	adc	r19, r19
    11f2:	44 1f       	adc	r20, r20
    11f4:	55 1f       	adc	r21, r21
    11f6:	6a 95       	dec	r22
    11f8:	d1 f7       	brne	.-12     	; 0x11ee <__unpack_f+0x54>
    11fa:	83 e0       	ldi	r24, 0x03	; 3
    11fc:	8c 93       	st	X, r24
    11fe:	0d c0       	rjmp	.+26     	; 0x121a <__unpack_f+0x80>
    1200:	22 0f       	add	r18, r18
    1202:	33 1f       	adc	r19, r19
    1204:	44 1f       	adc	r20, r20
    1206:	55 1f       	adc	r21, r21
    1208:	12 96       	adiw	r26, 0x02	; 2
    120a:	8d 91       	ld	r24, X+
    120c:	9c 91       	ld	r25, X
    120e:	13 97       	sbiw	r26, 0x03	; 3
    1210:	01 97       	sbiw	r24, 0x01	; 1
    1212:	13 96       	adiw	r26, 0x03	; 3
    1214:	9c 93       	st	X, r25
    1216:	8e 93       	st	-X, r24
    1218:	12 97       	sbiw	r26, 0x02	; 2
    121a:	20 30       	cpi	r18, 0x00	; 0
    121c:	80 e0       	ldi	r24, 0x00	; 0
    121e:	38 07       	cpc	r19, r24
    1220:	80 e0       	ldi	r24, 0x00	; 0
    1222:	48 07       	cpc	r20, r24
    1224:	80 e4       	ldi	r24, 0x40	; 64
    1226:	58 07       	cpc	r21, r24
    1228:	58 f3       	brcs	.-42     	; 0x1200 <__unpack_f+0x66>
    122a:	14 96       	adiw	r26, 0x04	; 4
    122c:	2d 93       	st	X+, r18
    122e:	3d 93       	st	X+, r19
    1230:	4d 93       	st	X+, r20
    1232:	5c 93       	st	X, r21
    1234:	17 97       	sbiw	r26, 0x07	; 7
    1236:	08 95       	ret
    1238:	2f 3f       	cpi	r18, 0xFF	; 255
    123a:	31 05       	cpc	r19, r1
    123c:	79 f4       	brne	.+30     	; 0x125c <__unpack_f+0xc2>
    123e:	41 15       	cp	r20, r1
    1240:	51 05       	cpc	r21, r1
    1242:	61 05       	cpc	r22, r1
    1244:	71 05       	cpc	r23, r1
    1246:	19 f4       	brne	.+6      	; 0x124e <__unpack_f+0xb4>
    1248:	84 e0       	ldi	r24, 0x04	; 4
    124a:	8c 93       	st	X, r24
    124c:	08 95       	ret
    124e:	64 ff       	sbrs	r22, 4
    1250:	03 c0       	rjmp	.+6      	; 0x1258 <__unpack_f+0xbe>
    1252:	81 e0       	ldi	r24, 0x01	; 1
    1254:	8c 93       	st	X, r24
    1256:	12 c0       	rjmp	.+36     	; 0x127c <__unpack_f+0xe2>
    1258:	1c 92       	st	X, r1
    125a:	10 c0       	rjmp	.+32     	; 0x127c <__unpack_f+0xe2>
    125c:	2f 57       	subi	r18, 0x7F	; 127
    125e:	30 40       	sbci	r19, 0x00	; 0
    1260:	13 96       	adiw	r26, 0x03	; 3
    1262:	3c 93       	st	X, r19
    1264:	2e 93       	st	-X, r18
    1266:	12 97       	sbiw	r26, 0x02	; 2
    1268:	83 e0       	ldi	r24, 0x03	; 3
    126a:	8c 93       	st	X, r24
    126c:	87 e0       	ldi	r24, 0x07	; 7
    126e:	44 0f       	add	r20, r20
    1270:	55 1f       	adc	r21, r21
    1272:	66 1f       	adc	r22, r22
    1274:	77 1f       	adc	r23, r23
    1276:	8a 95       	dec	r24
    1278:	d1 f7       	brne	.-12     	; 0x126e <__unpack_f+0xd4>
    127a:	70 64       	ori	r23, 0x40	; 64
    127c:	14 96       	adiw	r26, 0x04	; 4
    127e:	4d 93       	st	X+, r20
    1280:	5d 93       	st	X+, r21
    1282:	6d 93       	st	X+, r22
    1284:	7c 93       	st	X, r23
    1286:	17 97       	sbiw	r26, 0x07	; 7
    1288:	08 95       	ret

0000128a <__fpcmp_parts_f>:
    128a:	1f 93       	push	r17
    128c:	dc 01       	movw	r26, r24
    128e:	fb 01       	movw	r30, r22
    1290:	9c 91       	ld	r25, X
    1292:	92 30       	cpi	r25, 0x02	; 2
    1294:	08 f4       	brcc	.+2      	; 0x1298 <__fpcmp_parts_f+0xe>
    1296:	47 c0       	rjmp	.+142    	; 0x1326 <__fpcmp_parts_f+0x9c>
    1298:	80 81       	ld	r24, Z
    129a:	82 30       	cpi	r24, 0x02	; 2
    129c:	08 f4       	brcc	.+2      	; 0x12a0 <__fpcmp_parts_f+0x16>
    129e:	43 c0       	rjmp	.+134    	; 0x1326 <__fpcmp_parts_f+0x9c>
    12a0:	94 30       	cpi	r25, 0x04	; 4
    12a2:	51 f4       	brne	.+20     	; 0x12b8 <__fpcmp_parts_f+0x2e>
    12a4:	11 96       	adiw	r26, 0x01	; 1
    12a6:	1c 91       	ld	r17, X
    12a8:	84 30       	cpi	r24, 0x04	; 4
    12aa:	99 f5       	brne	.+102    	; 0x1312 <__fpcmp_parts_f+0x88>
    12ac:	81 81       	ldd	r24, Z+1	; 0x01
    12ae:	68 2f       	mov	r22, r24
    12b0:	70 e0       	ldi	r23, 0x00	; 0
    12b2:	61 1b       	sub	r22, r17
    12b4:	71 09       	sbc	r23, r1
    12b6:	3f c0       	rjmp	.+126    	; 0x1336 <__fpcmp_parts_f+0xac>
    12b8:	84 30       	cpi	r24, 0x04	; 4
    12ba:	21 f0       	breq	.+8      	; 0x12c4 <__fpcmp_parts_f+0x3a>
    12bc:	92 30       	cpi	r25, 0x02	; 2
    12be:	31 f4       	brne	.+12     	; 0x12cc <__fpcmp_parts_f+0x42>
    12c0:	82 30       	cpi	r24, 0x02	; 2
    12c2:	b9 f1       	breq	.+110    	; 0x1332 <__fpcmp_parts_f+0xa8>
    12c4:	81 81       	ldd	r24, Z+1	; 0x01
    12c6:	88 23       	and	r24, r24
    12c8:	89 f1       	breq	.+98     	; 0x132c <__fpcmp_parts_f+0xa2>
    12ca:	2d c0       	rjmp	.+90     	; 0x1326 <__fpcmp_parts_f+0x9c>
    12cc:	11 96       	adiw	r26, 0x01	; 1
    12ce:	1c 91       	ld	r17, X
    12d0:	11 97       	sbiw	r26, 0x01	; 1
    12d2:	82 30       	cpi	r24, 0x02	; 2
    12d4:	f1 f0       	breq	.+60     	; 0x1312 <__fpcmp_parts_f+0x88>
    12d6:	81 81       	ldd	r24, Z+1	; 0x01
    12d8:	18 17       	cp	r17, r24
    12da:	d9 f4       	brne	.+54     	; 0x1312 <__fpcmp_parts_f+0x88>
    12dc:	12 96       	adiw	r26, 0x02	; 2
    12de:	2d 91       	ld	r18, X+
    12e0:	3c 91       	ld	r19, X
    12e2:	13 97       	sbiw	r26, 0x03	; 3
    12e4:	82 81       	ldd	r24, Z+2	; 0x02
    12e6:	93 81       	ldd	r25, Z+3	; 0x03
    12e8:	82 17       	cp	r24, r18
    12ea:	93 07       	cpc	r25, r19
    12ec:	94 f0       	brlt	.+36     	; 0x1312 <__fpcmp_parts_f+0x88>
    12ee:	28 17       	cp	r18, r24
    12f0:	39 07       	cpc	r19, r25
    12f2:	bc f0       	brlt	.+46     	; 0x1322 <__fpcmp_parts_f+0x98>
    12f4:	14 96       	adiw	r26, 0x04	; 4
    12f6:	8d 91       	ld	r24, X+
    12f8:	9d 91       	ld	r25, X+
    12fa:	0d 90       	ld	r0, X+
    12fc:	bc 91       	ld	r27, X
    12fe:	a0 2d       	mov	r26, r0
    1300:	24 81       	ldd	r18, Z+4	; 0x04
    1302:	35 81       	ldd	r19, Z+5	; 0x05
    1304:	46 81       	ldd	r20, Z+6	; 0x06
    1306:	57 81       	ldd	r21, Z+7	; 0x07
    1308:	28 17       	cp	r18, r24
    130a:	39 07       	cpc	r19, r25
    130c:	4a 07       	cpc	r20, r26
    130e:	5b 07       	cpc	r21, r27
    1310:	18 f4       	brcc	.+6      	; 0x1318 <__fpcmp_parts_f+0x8e>
    1312:	11 23       	and	r17, r17
    1314:	41 f0       	breq	.+16     	; 0x1326 <__fpcmp_parts_f+0x9c>
    1316:	0a c0       	rjmp	.+20     	; 0x132c <__fpcmp_parts_f+0xa2>
    1318:	82 17       	cp	r24, r18
    131a:	93 07       	cpc	r25, r19
    131c:	a4 07       	cpc	r26, r20
    131e:	b5 07       	cpc	r27, r21
    1320:	40 f4       	brcc	.+16     	; 0x1332 <__fpcmp_parts_f+0xa8>
    1322:	11 23       	and	r17, r17
    1324:	19 f0       	breq	.+6      	; 0x132c <__fpcmp_parts_f+0xa2>
    1326:	61 e0       	ldi	r22, 0x01	; 1
    1328:	70 e0       	ldi	r23, 0x00	; 0
    132a:	05 c0       	rjmp	.+10     	; 0x1336 <__fpcmp_parts_f+0xac>
    132c:	6f ef       	ldi	r22, 0xFF	; 255
    132e:	7f ef       	ldi	r23, 0xFF	; 255
    1330:	02 c0       	rjmp	.+4      	; 0x1336 <__fpcmp_parts_f+0xac>
    1332:	60 e0       	ldi	r22, 0x00	; 0
    1334:	70 e0       	ldi	r23, 0x00	; 0
    1336:	cb 01       	movw	r24, r22
    1338:	1f 91       	pop	r17
    133a:	08 95       	ret

0000133c <__udivmodhi4>:
    133c:	aa 1b       	sub	r26, r26
    133e:	bb 1b       	sub	r27, r27
    1340:	51 e1       	ldi	r21, 0x11	; 17
    1342:	07 c0       	rjmp	.+14     	; 0x1352 <__udivmodhi4_ep>

00001344 <__udivmodhi4_loop>:
    1344:	aa 1f       	adc	r26, r26
    1346:	bb 1f       	adc	r27, r27
    1348:	a6 17       	cp	r26, r22
    134a:	b7 07       	cpc	r27, r23
    134c:	10 f0       	brcs	.+4      	; 0x1352 <__udivmodhi4_ep>
    134e:	a6 1b       	sub	r26, r22
    1350:	b7 0b       	sbc	r27, r23

00001352 <__udivmodhi4_ep>:
    1352:	88 1f       	adc	r24, r24
    1354:	99 1f       	adc	r25, r25
    1356:	5a 95       	dec	r21
    1358:	a9 f7       	brne	.-22     	; 0x1344 <__udivmodhi4_loop>
    135a:	80 95       	com	r24
    135c:	90 95       	com	r25
    135e:	bc 01       	movw	r22, r24
    1360:	cd 01       	movw	r24, r26
    1362:	08 95       	ret

00001364 <__divmodhi4>:
    1364:	97 fb       	bst	r25, 7
    1366:	09 2e       	mov	r0, r25
    1368:	07 26       	eor	r0, r23
    136a:	0a d0       	rcall	.+20     	; 0x1380 <__divmodhi4_neg1>
    136c:	77 fd       	sbrc	r23, 7
    136e:	04 d0       	rcall	.+8      	; 0x1378 <__divmodhi4_neg2>
    1370:	e5 df       	rcall	.-54     	; 0x133c <__udivmodhi4>
    1372:	06 d0       	rcall	.+12     	; 0x1380 <__divmodhi4_neg1>
    1374:	00 20       	and	r0, r0
    1376:	1a f4       	brpl	.+6      	; 0x137e <__divmodhi4_exit>

00001378 <__divmodhi4_neg2>:
    1378:	70 95       	com	r23
    137a:	61 95       	neg	r22
    137c:	7f 4f       	sbci	r23, 0xFF	; 255

0000137e <__divmodhi4_exit>:
    137e:	08 95       	ret

00001380 <__divmodhi4_neg1>:
    1380:	f6 f7       	brtc	.-4      	; 0x137e <__divmodhi4_exit>
    1382:	90 95       	com	r25
    1384:	81 95       	neg	r24
    1386:	9f 4f       	sbci	r25, 0xFF	; 255
    1388:	08 95       	ret

0000138a <__prologue_saves__>:
    138a:	2f 92       	push	r2
    138c:	3f 92       	push	r3
    138e:	4f 92       	push	r4
    1390:	5f 92       	push	r5
    1392:	6f 92       	push	r6
    1394:	7f 92       	push	r7
    1396:	8f 92       	push	r8
    1398:	9f 92       	push	r9
    139a:	af 92       	push	r10
    139c:	bf 92       	push	r11
    139e:	cf 92       	push	r12
    13a0:	df 92       	push	r13
    13a2:	ef 92       	push	r14
    13a4:	ff 92       	push	r15
    13a6:	0f 93       	push	r16
    13a8:	1f 93       	push	r17
    13aa:	cf 93       	push	r28
    13ac:	df 93       	push	r29
    13ae:	cd b7       	in	r28, 0x3d	; 61
    13b0:	de b7       	in	r29, 0x3e	; 62
    13b2:	ca 1b       	sub	r28, r26
    13b4:	db 0b       	sbc	r29, r27
    13b6:	0f b6       	in	r0, 0x3f	; 63
    13b8:	f8 94       	cli
    13ba:	de bf       	out	0x3e, r29	; 62
    13bc:	0f be       	out	0x3f, r0	; 63
    13be:	cd bf       	out	0x3d, r28	; 61
    13c0:	09 94       	ijmp

000013c2 <__epilogue_restores__>:
    13c2:	2a 88       	ldd	r2, Y+18	; 0x12
    13c4:	39 88       	ldd	r3, Y+17	; 0x11
    13c6:	48 88       	ldd	r4, Y+16	; 0x10
    13c8:	5f 84       	ldd	r5, Y+15	; 0x0f
    13ca:	6e 84       	ldd	r6, Y+14	; 0x0e
    13cc:	7d 84       	ldd	r7, Y+13	; 0x0d
    13ce:	8c 84       	ldd	r8, Y+12	; 0x0c
    13d0:	9b 84       	ldd	r9, Y+11	; 0x0b
    13d2:	aa 84       	ldd	r10, Y+10	; 0x0a
    13d4:	b9 84       	ldd	r11, Y+9	; 0x09
    13d6:	c8 84       	ldd	r12, Y+8	; 0x08
    13d8:	df 80       	ldd	r13, Y+7	; 0x07
    13da:	ee 80       	ldd	r14, Y+6	; 0x06
    13dc:	fd 80       	ldd	r15, Y+5	; 0x05
    13de:	0c 81       	ldd	r16, Y+4	; 0x04
    13e0:	1b 81       	ldd	r17, Y+3	; 0x03
    13e2:	aa 81       	ldd	r26, Y+2	; 0x02
    13e4:	b9 81       	ldd	r27, Y+1	; 0x01
    13e6:	ce 0f       	add	r28, r30
    13e8:	d1 1d       	adc	r29, r1
    13ea:	0f b6       	in	r0, 0x3f	; 63
    13ec:	f8 94       	cli
    13ee:	de bf       	out	0x3e, r29	; 62
    13f0:	0f be       	out	0x3f, r0	; 63
    13f2:	cd bf       	out	0x3d, r28	; 61
    13f4:	ed 01       	movw	r28, r26
    13f6:	08 95       	ret

000013f8 <do_rand>:
    13f8:	a0 e0       	ldi	r26, 0x00	; 0
    13fa:	b0 e0       	ldi	r27, 0x00	; 0
    13fc:	e2 e0       	ldi	r30, 0x02	; 2
    13fe:	fa e0       	ldi	r31, 0x0A	; 10
    1400:	0c 94 cd 09 	jmp	0x139a	; 0x139a <__prologue_saves__+0x10>
    1404:	ec 01       	movw	r28, r24
    1406:	a8 80       	ld	r10, Y
    1408:	b9 80       	ldd	r11, Y+1	; 0x01
    140a:	ca 80       	ldd	r12, Y+2	; 0x02
    140c:	db 80       	ldd	r13, Y+3	; 0x03
    140e:	a1 14       	cp	r10, r1
    1410:	b1 04       	cpc	r11, r1
    1412:	c1 04       	cpc	r12, r1
    1414:	d1 04       	cpc	r13, r1
    1416:	41 f4       	brne	.+16     	; 0x1428 <do_rand+0x30>
    1418:	84 e2       	ldi	r24, 0x24	; 36
    141a:	a8 2e       	mov	r10, r24
    141c:	89 ed       	ldi	r24, 0xD9	; 217
    141e:	b8 2e       	mov	r11, r24
    1420:	8b e5       	ldi	r24, 0x5B	; 91
    1422:	c8 2e       	mov	r12, r24
    1424:	87 e0       	ldi	r24, 0x07	; 7
    1426:	d8 2e       	mov	r13, r24
    1428:	c6 01       	movw	r24, r12
    142a:	b5 01       	movw	r22, r10
    142c:	2d e1       	ldi	r18, 0x1D	; 29
    142e:	33 ef       	ldi	r19, 0xF3	; 243
    1430:	41 e0       	ldi	r20, 0x01	; 1
    1432:	50 e0       	ldi	r21, 0x00	; 0
    1434:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <__divmodsi4>
    1438:	27 ea       	ldi	r18, 0xA7	; 167
    143a:	31 e4       	ldi	r19, 0x41	; 65
    143c:	40 e0       	ldi	r20, 0x00	; 0
    143e:	50 e0       	ldi	r21, 0x00	; 0
    1440:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <__mulsi3>
    1444:	7b 01       	movw	r14, r22
    1446:	8c 01       	movw	r16, r24
    1448:	c6 01       	movw	r24, r12
    144a:	b5 01       	movw	r22, r10
    144c:	2d e1       	ldi	r18, 0x1D	; 29
    144e:	33 ef       	ldi	r19, 0xF3	; 243
    1450:	41 e0       	ldi	r20, 0x01	; 1
    1452:	50 e0       	ldi	r21, 0x00	; 0
    1454:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <__divmodsi4>
    1458:	ca 01       	movw	r24, r20
    145a:	b9 01       	movw	r22, r18
    145c:	2c ee       	ldi	r18, 0xEC	; 236
    145e:	34 ef       	ldi	r19, 0xF4	; 244
    1460:	4f ef       	ldi	r20, 0xFF	; 255
    1462:	5f ef       	ldi	r21, 0xFF	; 255
    1464:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <__mulsi3>
    1468:	6e 0d       	add	r22, r14
    146a:	7f 1d       	adc	r23, r15
    146c:	80 1f       	adc	r24, r16
    146e:	91 1f       	adc	r25, r17
    1470:	97 ff       	sbrs	r25, 7
    1472:	04 c0       	rjmp	.+8      	; 0x147c <do_rand+0x84>
    1474:	61 50       	subi	r22, 0x01	; 1
    1476:	70 40       	sbci	r23, 0x00	; 0
    1478:	80 40       	sbci	r24, 0x00	; 0
    147a:	90 48       	sbci	r25, 0x80	; 128
    147c:	68 83       	st	Y, r22
    147e:	79 83       	std	Y+1, r23	; 0x01
    1480:	8a 83       	std	Y+2, r24	; 0x02
    1482:	9b 83       	std	Y+3, r25	; 0x03
    1484:	9b 01       	movw	r18, r22
    1486:	3f 77       	andi	r19, 0x7F	; 127
    1488:	c9 01       	movw	r24, r18
    148a:	cd b7       	in	r28, 0x3d	; 61
    148c:	de b7       	in	r29, 0x3e	; 62
    148e:	ea e0       	ldi	r30, 0x0A	; 10
    1490:	0c 94 e9 09 	jmp	0x13d2	; 0x13d2 <__epilogue_restores__+0x10>

00001494 <rand_r>:
    1494:	0e 94 fc 09 	call	0x13f8	; 0x13f8 <do_rand>
    1498:	08 95       	ret

0000149a <rand>:
    149a:	8e e0       	ldi	r24, 0x0E	; 14
    149c:	92 e0       	ldi	r25, 0x02	; 2
    149e:	0e 94 fc 09 	call	0x13f8	; 0x13f8 <do_rand>
    14a2:	08 95       	ret

000014a4 <srand>:
    14a4:	a0 e0       	ldi	r26, 0x00	; 0
    14a6:	b0 e0       	ldi	r27, 0x00	; 0
    14a8:	80 93 0e 02 	sts	0x020E, r24
    14ac:	90 93 0f 02 	sts	0x020F, r25
    14b0:	a0 93 10 02 	sts	0x0210, r26
    14b4:	b0 93 11 02 	sts	0x0211, r27
    14b8:	08 95       	ret

000014ba <__mulsi3>:
    14ba:	62 9f       	mul	r22, r18
    14bc:	d0 01       	movw	r26, r0
    14be:	73 9f       	mul	r23, r19
    14c0:	f0 01       	movw	r30, r0
    14c2:	82 9f       	mul	r24, r18
    14c4:	e0 0d       	add	r30, r0
    14c6:	f1 1d       	adc	r31, r1
    14c8:	64 9f       	mul	r22, r20
    14ca:	e0 0d       	add	r30, r0
    14cc:	f1 1d       	adc	r31, r1
    14ce:	92 9f       	mul	r25, r18
    14d0:	f0 0d       	add	r31, r0
    14d2:	83 9f       	mul	r24, r19
    14d4:	f0 0d       	add	r31, r0
    14d6:	74 9f       	mul	r23, r20
    14d8:	f0 0d       	add	r31, r0
    14da:	65 9f       	mul	r22, r21
    14dc:	f0 0d       	add	r31, r0
    14de:	99 27       	eor	r25, r25
    14e0:	72 9f       	mul	r23, r18
    14e2:	b0 0d       	add	r27, r0
    14e4:	e1 1d       	adc	r30, r1
    14e6:	f9 1f       	adc	r31, r25
    14e8:	63 9f       	mul	r22, r19
    14ea:	b0 0d       	add	r27, r0
    14ec:	e1 1d       	adc	r30, r1
    14ee:	f9 1f       	adc	r31, r25
    14f0:	bd 01       	movw	r22, r26
    14f2:	cf 01       	movw	r24, r30
    14f4:	11 24       	eor	r1, r1
    14f6:	08 95       	ret

000014f8 <__divmodsi4>:
    14f8:	97 fb       	bst	r25, 7
    14fa:	09 2e       	mov	r0, r25
    14fc:	05 26       	eor	r0, r21
    14fe:	0e d0       	rcall	.+28     	; 0x151c <__divmodsi4_neg1>
    1500:	57 fd       	sbrc	r21, 7
    1502:	04 d0       	rcall	.+8      	; 0x150c <__divmodsi4_neg2>
    1504:	14 d0       	rcall	.+40     	; 0x152e <__udivmodsi4>
    1506:	0a d0       	rcall	.+20     	; 0x151c <__divmodsi4_neg1>
    1508:	00 1c       	adc	r0, r0
    150a:	38 f4       	brcc	.+14     	; 0x151a <__divmodsi4_exit>

0000150c <__divmodsi4_neg2>:
    150c:	50 95       	com	r21
    150e:	40 95       	com	r20
    1510:	30 95       	com	r19
    1512:	21 95       	neg	r18
    1514:	3f 4f       	sbci	r19, 0xFF	; 255
    1516:	4f 4f       	sbci	r20, 0xFF	; 255
    1518:	5f 4f       	sbci	r21, 0xFF	; 255

0000151a <__divmodsi4_exit>:
    151a:	08 95       	ret

0000151c <__divmodsi4_neg1>:
    151c:	f6 f7       	brtc	.-4      	; 0x151a <__divmodsi4_exit>
    151e:	90 95       	com	r25
    1520:	80 95       	com	r24
    1522:	70 95       	com	r23
    1524:	61 95       	neg	r22
    1526:	7f 4f       	sbci	r23, 0xFF	; 255
    1528:	8f 4f       	sbci	r24, 0xFF	; 255
    152a:	9f 4f       	sbci	r25, 0xFF	; 255
    152c:	08 95       	ret

0000152e <__udivmodsi4>:
    152e:	a1 e2       	ldi	r26, 0x21	; 33
    1530:	1a 2e       	mov	r1, r26
    1532:	aa 1b       	sub	r26, r26
    1534:	bb 1b       	sub	r27, r27
    1536:	fd 01       	movw	r30, r26
    1538:	0d c0       	rjmp	.+26     	; 0x1554 <__udivmodsi4_ep>

0000153a <__udivmodsi4_loop>:
    153a:	aa 1f       	adc	r26, r26
    153c:	bb 1f       	adc	r27, r27
    153e:	ee 1f       	adc	r30, r30
    1540:	ff 1f       	adc	r31, r31
    1542:	a2 17       	cp	r26, r18
    1544:	b3 07       	cpc	r27, r19
    1546:	e4 07       	cpc	r30, r20
    1548:	f5 07       	cpc	r31, r21
    154a:	20 f0       	brcs	.+8      	; 0x1554 <__udivmodsi4_ep>
    154c:	a2 1b       	sub	r26, r18
    154e:	b3 0b       	sbc	r27, r19
    1550:	e4 0b       	sbc	r30, r20
    1552:	f5 0b       	sbc	r31, r21

00001554 <__udivmodsi4_ep>:
    1554:	66 1f       	adc	r22, r22
    1556:	77 1f       	adc	r23, r23
    1558:	88 1f       	adc	r24, r24
    155a:	99 1f       	adc	r25, r25
    155c:	1a 94       	dec	r1
    155e:	69 f7       	brne	.-38     	; 0x153a <__udivmodsi4_loop>
    1560:	60 95       	com	r22
    1562:	70 95       	com	r23
    1564:	80 95       	com	r24
    1566:	90 95       	com	r25
    1568:	9b 01       	movw	r18, r22
    156a:	ac 01       	movw	r20, r24
    156c:	bd 01       	movw	r22, r26
    156e:	cf 01       	movw	r24, r30
    1570:	08 95       	ret

00001572 <_exit>:
    1572:	f8 94       	cli

00001574 <__stop_program>:
    1574:	ff cf       	rjmp	.-2      	; 0x1574 <__stop_program>
